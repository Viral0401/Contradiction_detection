{"metadata":{"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8253869,"sourceType":"datasetVersion","datasetId":4897897},{"sourceId":8996842,"sourceType":"datasetVersion","datasetId":5419267}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":38969.602712,"end_time":"2024-07-18T17:40:35.051252","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-07-18T06:51:05.448540","version":"2.5.0"},"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{"0c3729a85d04400080623ad9e426145a":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0ea9caba7f3a4bdaae0ee1666bb0654d":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0f9e951e5b854c41aaeaebd3607ffc08":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"1a1049de1dfc4acd9173c3ed05c71d22":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1fdf39359dc847a0bf8887c5a5a315b7":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"336d5f293b80437f8aefcc8d316a7872":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_1a1049de1dfc4acd9173c3ed05c71d22","placeholder":"​","style":"IPY_MODEL_6d63d23dd78d407e918fc41baa391484","value":" 385/385 [00:00&lt;00:00, 27.9kB/s]"}},"33e4f1710f24458aa808912fecf8722b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"4f1fcc572f0e4ac9aa6e6b8129aaa840":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d3404f9692064116a900e3e83a64c8ad","IPY_MODEL_dc856f9463a24d79a18c7700f43134c4","IPY_MODEL_d456801b7eb0442688a0230f257995c1"],"layout":"IPY_MODEL_0c3729a85d04400080623ad9e426145a"}},"5351e365c1a14eb5b8e22d520d8ebe4d":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"544ad04937054db591070d392cfa5181":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"59beda3837b34477a09ef164a5c98fb1":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5a8b737a70d0474eacecc7ad9cf21917":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5351e365c1a14eb5b8e22d520d8ebe4d","placeholder":"​","style":"IPY_MODEL_b52079b024574a4fa55b3393e71f4c1b","value":" 442M/442M [00:02&lt;00:00, 210MB/s]"}},"61368ffc363947748b7be92c01e5c314":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_59beda3837b34477a09ef164a5c98fb1","max":442221694,"min":0,"orientation":"horizontal","style":"IPY_MODEL_0f9e951e5b854c41aaeaebd3607ffc08","value":442221694}},"631c5de8ab4b4d2d912cf709f877b0ba":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_f5a69830d3d743528492af4c2a165b89","IPY_MODEL_9306b8199db2442492d129e264fdaf29","IPY_MODEL_336d5f293b80437f8aefcc8d316a7872"],"layout":"IPY_MODEL_f157416f10874c929f58924448b33741"}},"63b4284d2b2d4912a0a7fcb8aa58251a":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"671166f868c14f7098c428b55ec1d404":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"6d63d23dd78d407e918fc41baa391484":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"7e99c35ce4c141ea9cbaf1896a72e1d8":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"9306b8199db2442492d129e264fdaf29":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_e89e7c74cfc046caa195fc38b5bfc821","max":385,"min":0,"orientation":"horizontal","style":"IPY_MODEL_1fdf39359dc847a0bf8887c5a5a315b7","value":385}},"b52079b024574a4fa55b3393e71f4c1b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ba0d9cfe20ec4964b54c121f7e1a3124":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bbf61282294d4307b3724c01c321082e":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_63b4284d2b2d4912a0a7fcb8aa58251a","placeholder":"​","style":"IPY_MODEL_671166f868c14f7098c428b55ec1d404","value":"pytorch_model.bin: 100%"}},"bec10d1124834c6bb9a1172f204ea685":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ca9a91eabc1f47319d917e722d20d01f":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_bbf61282294d4307b3724c01c321082e","IPY_MODEL_61368ffc363947748b7be92c01e5c314","IPY_MODEL_5a8b737a70d0474eacecc7ad9cf21917"],"layout":"IPY_MODEL_effffcaf446c4b43943ffb55ec07e5cb"}},"d3404f9692064116a900e3e83a64c8ad":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0ea9caba7f3a4bdaae0ee1666bb0654d","placeholder":"​","style":"IPY_MODEL_7e99c35ce4c141ea9cbaf1896a72e1d8","value":"vocab.txt: 100%"}},"d456801b7eb0442688a0230f257995c1":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ba0d9cfe20ec4964b54c121f7e1a3124","placeholder":"​","style":"IPY_MODEL_544ad04937054db591070d392cfa5181","value":" 228k/228k [00:00&lt;00:00, 4.81MB/s]"}},"dc856f9463a24d79a18c7700f43134c4":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_fd278dcba2244dc7b5570cf7dd0000ec","max":227845,"min":0,"orientation":"horizontal","style":"IPY_MODEL_33e4f1710f24458aa808912fecf8722b","value":227845}},"df8d0945eacc4c22b9590a6435c87172":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"e89e7c74cfc046caa195fc38b5bfc821":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"effffcaf446c4b43943ffb55ec07e5cb":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f157416f10874c929f58924448b33741":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f5a69830d3d743528492af4c2a165b89":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_bec10d1124834c6bb9a1172f204ea685","placeholder":"​","style":"IPY_MODEL_df8d0945eacc4c22b9590a6435c87172","value":"config.json: 100%"}},"fd278dcba2244dc7b5570cf7dd0000ec":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}}},"version_major":2,"version_minor":0}}},"nbformat_minor":5,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install keras_preprocessing","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","papermill":{"duration":15.443476,"end_time":"2024-07-18T06:51:23.793956","exception":false,"start_time":"2024-07-18T06:51:08.350480","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:19:24.685624Z","iopub.execute_input":"2024-07-22T18:19:24.686528Z","iopub.status.idle":"2024-07-22T18:19:40.619863Z","shell.execute_reply.started":"2024-07-22T18:19:24.686492Z","shell.execute_reply":"2024-07-22T18:19:40.618593Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Collecting keras_preprocessing\n  Downloading Keras_Preprocessing-1.1.2-py2.py3-none-any.whl.metadata (1.9 kB)\nRequirement already satisfied: numpy>=1.9.1 in /opt/conda/lib/python3.10/site-packages (from keras_preprocessing) (1.26.4)\nRequirement already satisfied: six>=1.9.0 in /opt/conda/lib/python3.10/site-packages (from keras_preprocessing) (1.16.0)\nDownloading Keras_Preprocessing-1.1.2-py2.py3-none-any.whl (42 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.6/42.6 kB\u001b[0m \u001b[31m633.0 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\u001b[36m0:00:01\u001b[0m\n\u001b[?25hInstalling collected packages: keras_preprocessing\nSuccessfully installed keras_preprocessing-1.1.2\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.utils import class_weight","metadata":{"papermill":{"duration":1.693977,"end_time":"2024-07-18T06:51:25.508854","exception":false,"start_time":"2024-07-18T06:51:23.814877","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:19:40.622140Z","iopub.execute_input":"2024-07-22T18:19:40.622476Z","iopub.status.idle":"2024-07-22T18:19:41.450564Z","shell.execute_reply.started":"2024-07-22T18:19:40.622446Z","shell.execute_reply":"2024-07-22T18:19:41.449609Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/contradictiondataset/Sdata_annotated.csv\")","metadata":{"papermill":{"duration":0.431965,"end_time":"2024-07-18T06:51:25.962945","exception":false,"start_time":"2024-07-18T06:51:25.530980","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:19:41.451808Z","iopub.execute_input":"2024-07-22T18:19:41.452227Z","iopub.status.idle":"2024-07-22T18:19:41.913571Z","shell.execute_reply.started":"2024-07-22T18:19:41.452192Z","shell.execute_reply":"2024-07-22T18:19:41.912760Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"papermill":{"duration":0.053382,"end_time":"2024-07-18T06:51:26.037565","exception":false,"start_time":"2024-07-18T06:51:25.984183","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:19:41.915532Z","iopub.execute_input":"2024-07-22T18:19:41.915824Z","iopub.status.idle":"2024-07-22T18:19:41.945908Z","shell.execute_reply.started":"2024-07-22T18:19:41.915798Z","shell.execute_reply":"2024-07-22T18:19:41.945048Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0.1  Unnamed: 0        paper_id  pair_id  \\\n0             0           0  ICLR_2019_1401        3   \n1             1           1    NIPS_2016_89        3   \n2             2           2    NIPS_2016_89        4   \n3             3           3    NIPS_2016_89        5   \n4             4           4    NIPS_2016_89        5   \n\n                                          hypothesis  \\\n0  further the paper makes several misleading cla...   \n1  4 .i like the key idea and the speedup is very...   \n2  the idea to use sampling is nice but the analy...   \n3  to summarize i think this paper give some empi...   \n4  to summarize i think this paper give some empi...   \n\n                                             premise       aspect        s1  \\\n0  the paper is rather well written but it strong...      clarity  positive   \n1  review scores reflect this reviewers impressio...  originality  negative   \n2  review scores reflect this reviewers impressio...  originality  negative   \n3  in my opinion the overall quality of the paper...    soundness  positive   \n4  the context and relevance as well as the contr...    soundness  positive   \n\n         s2 line_pair label  \n0  negative    (6, 2)     n  \n1  positive   (5, 20)     n  \n2  positive   (5, 18)     n  \n3  negative   (4, 10)     n  \n4  negative   (5, 10)     n  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0.1</th>\n      <th>Unnamed: 0</th>\n      <th>paper_id</th>\n      <th>pair_id</th>\n      <th>hypothesis</th>\n      <th>premise</th>\n      <th>aspect</th>\n      <th>s1</th>\n      <th>s2</th>\n      <th>line_pair</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>ICLR_2019_1401</td>\n      <td>3</td>\n      <td>further the paper makes several misleading cla...</td>\n      <td>the paper is rather well written but it strong...</td>\n      <td>clarity</td>\n      <td>positive</td>\n      <td>negative</td>\n      <td>(6, 2)</td>\n      <td>n</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>NIPS_2016_89</td>\n      <td>3</td>\n      <td>4 .i like the key idea and the speedup is very...</td>\n      <td>review scores reflect this reviewers impressio...</td>\n      <td>originality</td>\n      <td>negative</td>\n      <td>positive</td>\n      <td>(5, 20)</td>\n      <td>n</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>2</td>\n      <td>NIPS_2016_89</td>\n      <td>4</td>\n      <td>the idea to use sampling is nice but the analy...</td>\n      <td>review scores reflect this reviewers impressio...</td>\n      <td>originality</td>\n      <td>negative</td>\n      <td>positive</td>\n      <td>(5, 18)</td>\n      <td>n</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>3</td>\n      <td>NIPS_2016_89</td>\n      <td>5</td>\n      <td>to summarize i think this paper give some empi...</td>\n      <td>in my opinion the overall quality of the paper...</td>\n      <td>soundness</td>\n      <td>positive</td>\n      <td>negative</td>\n      <td>(4, 10)</td>\n      <td>n</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>4</td>\n      <td>NIPS_2016_89</td>\n      <td>5</td>\n      <td>to summarize i think this paper give some empi...</td>\n      <td>the context and relevance as well as the contr...</td>\n      <td>soundness</td>\n      <td>positive</td>\n      <td>negative</td>\n      <td>(5, 10)</td>\n      <td>n</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.drop(['Unnamed: 0.1', 'Unnamed: 0', 'paper_id', 'pair_id', 'aspect', 'line_pair'], inplace = True, axis=1)","metadata":{"papermill":{"duration":0.036508,"end_time":"2024-07-18T06:51:26.098367","exception":false,"start_time":"2024-07-18T06:51:26.061859","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:19:41.946928Z","iopub.execute_input":"2024-07-22T18:19:41.947241Z","iopub.status.idle":"2024-07-22T18:19:41.960412Z","shell.execute_reply.started":"2024-07-22T18:19:41.947210Z","shell.execute_reply":"2024-07-22T18:19:41.959553Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"df['label'] = df['label'].replace({'c': 1, 'n': 0})","metadata":{"papermill":{"duration":0.061794,"end_time":"2024-07-18T06:51:26.181035","exception":false,"start_time":"2024-07-18T06:51:26.119241","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:19:41.961511Z","iopub.execute_input":"2024-07-22T18:19:41.961826Z","iopub.status.idle":"2024-07-22T18:19:42.003501Z","shell.execute_reply.started":"2024-07-22T18:19:41.961796Z","shell.execute_reply":"2024-07-22T18:19:42.002637Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_34/2613823751.py:1: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n  df['label'] = df['label'].replace({'c': 1, 'n': 0})\n","output_type":"stream"}]},{"cell_type":"code","source":"df.head()","metadata":{"papermill":{"duration":0.035605,"end_time":"2024-07-18T06:51:26.236493","exception":false,"start_time":"2024-07-18T06:51:26.200888","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:19:42.004492Z","iopub.execute_input":"2024-07-22T18:19:42.004749Z","iopub.status.idle":"2024-07-22T18:19:42.014549Z","shell.execute_reply.started":"2024-07-22T18:19:42.004726Z","shell.execute_reply":"2024-07-22T18:19:42.013592Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"                                          hypothesis  \\\n0  further the paper makes several misleading cla...   \n1  4 .i like the key idea and the speedup is very...   \n2  the idea to use sampling is nice but the analy...   \n3  to summarize i think this paper give some empi...   \n4  to summarize i think this paper give some empi...   \n\n                                             premise        s1        s2  \\\n0  the paper is rather well written but it strong...  positive  negative   \n1  review scores reflect this reviewers impressio...  negative  positive   \n2  review scores reflect this reviewers impressio...  negative  positive   \n3  in my opinion the overall quality of the paper...  positive  negative   \n4  the context and relevance as well as the contr...  positive  negative   \n\n   label  \n0      0  \n1      0  \n2      0  \n3      0  \n4      0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>hypothesis</th>\n      <th>premise</th>\n      <th>s1</th>\n      <th>s2</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>further the paper makes several misleading cla...</td>\n      <td>the paper is rather well written but it strong...</td>\n      <td>positive</td>\n      <td>negative</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4 .i like the key idea and the speedup is very...</td>\n      <td>review scores reflect this reviewers impressio...</td>\n      <td>negative</td>\n      <td>positive</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>the idea to use sampling is nice but the analy...</td>\n      <td>review scores reflect this reviewers impressio...</td>\n      <td>negative</td>\n      <td>positive</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>to summarize i think this paper give some empi...</td>\n      <td>in my opinion the overall quality of the paper...</td>\n      <td>positive</td>\n      <td>negative</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>to summarize i think this paper give some empi...</td>\n      <td>the context and relevance as well as the contr...</td>\n      <td>positive</td>\n      <td>negative</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"count_0 = df[df['label'] == 0].shape[0]\n\ncount_1 = df[df['label'] == 1].shape[0]\n\nprint(\"Number of rows where 'label' is 0:\", count_0)\nprint(\"Number of rows where 'label' is 1:\", count_1)","metadata":{"papermill":{"duration":0.039349,"end_time":"2024-07-18T06:51:26.297265","exception":false,"start_time":"2024-07-18T06:51:26.257916","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:19:42.015664Z","iopub.execute_input":"2024-07-22T18:19:42.015974Z","iopub.status.idle":"2024-07-22T18:19:42.031077Z","shell.execute_reply.started":"2024-07-22T18:19:42.015945Z","shell.execute_reply":"2024-07-22T18:19:42.030111Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Number of rows where 'label' is 0: 42250\nNumber of rows where 'label' is 1: 5725\n","output_type":"stream"}]},{"cell_type":"code","source":"df.shape","metadata":{"papermill":{"duration":0.032058,"end_time":"2024-07-18T06:51:26.352206","exception":false,"start_time":"2024-07-18T06:51:26.320148","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:19:42.032445Z","iopub.execute_input":"2024-07-22T18:19:42.032981Z","iopub.status.idle":"2024-07-22T18:19:42.040314Z","shell.execute_reply.started":"2024-07-22T18:19:42.032950Z","shell.execute_reply":"2024-07-22T18:19:42.039442Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"(47975, 5)"},"metadata":{}}]},{"cell_type":"code","source":"# Separate the dataset by labels\nlabel_0_df = df[df['label'] == 0]\nlabel_1_df = df[df['label'] == 1]\n\n# Downsample label 0 to 15,000 rows\nlabel_0_downsampled = label_0_df.sample(n=10000, random_state=42)\n\n# Upsample label 1 to 15,000 rows (with replacement)\nlabel_1_upsampled = label_1_df.sample(n=10000, replace=True, random_state=42)\n\n# Combine the two datasets\nbalanced_df = pd.concat([label_0_downsampled, label_1_upsampled])\n\n# Shuffle the combined dataset\ndf = balanced_df.sample(frac=1, random_state=42).reset_index(drop=True)\n\nbalanced_df.to_csv('/kaggle/working/balanced_dataset.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T18:24:02.887241Z","iopub.execute_input":"2024-07-22T18:24:02.888011Z","iopub.status.idle":"2024-07-22T18:24:03.141940Z","shell.execute_reply.started":"2024-07-22T18:24:02.887981Z","shell.execute_reply":"2024-07-22T18:24:03.141204Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"count_0 = df[df['label'] == 0].shape[0]\n\ncount_1 = df[df['label'] == 1].shape[0]\n\nprint(\"Number of rows where 'label' is 0:\", count_0)\nprint(\"Number of rows where 'label' is 1:\", count_1)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T18:22:55.039899Z","iopub.execute_input":"2024-07-22T18:22:55.040193Z","iopub.status.idle":"2024-07-22T18:22:55.049917Z","shell.execute_reply.started":"2024-07-22T18:22:55.040153Z","shell.execute_reply":"2024-07-22T18:22:55.049004Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Number of rows where 'label' is 0: 10000\nNumber of rows where 'label' is 1: 10000\n","output_type":"stream"}]},{"cell_type":"code","source":"X = df[['hypothesis', 'premise']]\ny = df['label']","metadata":{"papermill":{"duration":0.033959,"end_time":"2024-07-18T06:51:26.408281","exception":false,"start_time":"2024-07-18T06:51:26.374322","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:26:10.590164Z","iopub.execute_input":"2024-07-22T18:26:10.591072Z","iopub.status.idle":"2024-07-22T18:26:10.597587Z","shell.execute_reply.started":"2024-07-22T18:26:10.591042Z","shell.execute_reply":"2024-07-22T18:26:10.596715Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"papermill":{"duration":0.034994,"end_time":"2024-07-18T06:51:27.128735","exception":false,"start_time":"2024-07-18T06:51:27.093741","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:26:10.620755Z","iopub.execute_input":"2024-07-22T18:26:10.621253Z","iopub.status.idle":"2024-07-22T18:26:10.631969Z","shell.execute_reply.started":"2024-07-22T18:26:10.621228Z","shell.execute_reply":"2024-07-22T18:26:10.631031Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"                                          hypothesis  \\\n0  on the chosen datasets and tasks the proposed ...   \n1  pro in general the idea is very intuitive and ...   \n2  in conclusion the authors observe that quantiz...   \n3  the paper is clearly written and easy to follo...   \n4  decision in its current form the paper should ...   \n\n                                             premise        s1        s2  \\\n0  while the idea has some merit it is an interes...  negative  positive   \n1  however the following implicit assumptions lim...  negative  positive   \n2  this result is believable but should not be co...  negative  positive   \n3  clarity the paper is written very clearly and ...  positive  negative   \n4  the results are plausible given the assumptions .  positive  negative   \n\n   label  \n0      1  \n1      0  \n2      0  \n3      0  \n4      1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>hypothesis</th>\n      <th>premise</th>\n      <th>s1</th>\n      <th>s2</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>on the chosen datasets and tasks the proposed ...</td>\n      <td>while the idea has some merit it is an interes...</td>\n      <td>negative</td>\n      <td>positive</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>pro in general the idea is very intuitive and ...</td>\n      <td>however the following implicit assumptions lim...</td>\n      <td>negative</td>\n      <td>positive</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>in conclusion the authors observe that quantiz...</td>\n      <td>this result is believable but should not be co...</td>\n      <td>negative</td>\n      <td>positive</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>the paper is clearly written and easy to follo...</td>\n      <td>clarity the paper is written very clearly and ...</td>\n      <td>positive</td>\n      <td>negative</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>decision in its current form the paper should ...</td>\n      <td>the results are plausible given the assumptions .</td>\n      <td>positive</td>\n      <td>negative</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"count_0 = df[df['label'] == 0].shape[0]\n\ncount_1 = df[df['label'] == 1].shape[0]\n\nprint(\"Number of rows where 'label' is 0:\", count_0)\nprint(\"Number of rows where 'label' is 1:\", count_1)","metadata":{"papermill":{"duration":0.039065,"end_time":"2024-07-18T06:51:27.188862","exception":false,"start_time":"2024-07-18T06:51:27.149797","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:26:10.783934Z","iopub.execute_input":"2024-07-22T18:26:10.784220Z","iopub.status.idle":"2024-07-22T18:26:10.792926Z","shell.execute_reply.started":"2024-07-22T18:26:10.784195Z","shell.execute_reply":"2024-07-22T18:26:10.792115Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Number of rows where 'label' is 0: 10000\nNumber of rows where 'label' is 1: 10000\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split","metadata":{"papermill":{"duration":0.029709,"end_time":"2024-07-18T06:51:27.240568","exception":false,"start_time":"2024-07-18T06:51:27.210859","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:26:10.979860Z","iopub.execute_input":"2024-07-22T18:26:10.980118Z","iopub.status.idle":"2024-07-22T18:26:11.255483Z","shell.execute_reply.started":"2024-07-22T18:26:10.980096Z","shell.execute_reply":"2024-07-22T18:26:11.254714Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"X = df[['hypothesis','premise']]\ny = df['label']","metadata":{"papermill":{"duration":0.033215,"end_time":"2024-07-18T06:51:27.295895","exception":false,"start_time":"2024-07-18T06:51:27.262680","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:26:12.272549Z","iopub.execute_input":"2024-07-22T18:26:12.272910Z","iopub.status.idle":"2024-07-22T18:26:12.279438Z","shell.execute_reply.started":"2024-07-22T18:26:12.272880Z","shell.execute_reply":"2024-07-22T18:26:12.278528Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","metadata":{"papermill":{"duration":0.043786,"end_time":"2024-07-18T06:51:27.361563","exception":false,"start_time":"2024-07-18T06:51:27.317777","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:26:14.260986Z","iopub.execute_input":"2024-07-22T18:26:14.261364Z","iopub.status.idle":"2024-07-22T18:26:14.270685Z","shell.execute_reply.started":"2024-07-22T18:26:14.261335Z","shell.execute_reply":"2024-07-22T18:26:14.269824Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"from transformers import AutoTokenizer, TFAutoModel\nimport tensorflow as tf","metadata":{"papermill":{"duration":15.644281,"end_time":"2024-07-18T06:51:43.028545","exception":false,"start_time":"2024-07-18T06:51:27.384264","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:26:14.651511Z","iopub.execute_input":"2024-07-22T18:26:14.652377Z","iopub.status.idle":"2024-07-22T18:26:41.677083Z","shell.execute_reply.started":"2024-07-22T18:26:14.652347Z","shell.execute_reply":"2024-07-22T18:26:41.676172Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stderr","text":"2024-07-22 18:26:26.548616: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-07-22 18:26:26.548726: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-07-22 18:26:26.847370: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"tokenizer = AutoTokenizer.from_pretrained(\"allenai/scibert_scivocab_uncased\")\nscibert_model = TFAutoModel.from_pretrained(\"allenai/scibert_scivocab_uncased\", from_pt=True)","metadata":{"papermill":{"duration":7.752362,"end_time":"2024-07-18T06:51:50.802803","exception":false,"start_time":"2024-07-18T06:51:43.050441","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:26:41.679053Z","iopub.execute_input":"2024-07-22T18:26:41.680121Z","iopub.status.idle":"2024-07-22T18:26:50.403750Z","shell.execute_reply.started":"2024-07-22T18:26:41.680084Z","shell.execute_reply":"2024-07-22T18:26:50.403014Z"},"trusted":true},"execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/385 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0a1843006dc44f7c9982d9684589ac02"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/228k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"437b449ea8c44280876dba5f707a188a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"pytorch_model.bin:   0%|          | 0.00/442M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5b715331ba234954a12d82b8ff11d485"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torch/_utils.py:831: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()\n  return self.fget.__get__(instance, owner)()\nSome weights of the PyTorch model were not used when initializing the TF 2.0 model TFBertModel: ['cls.predictions.decoder.bias', 'cls.seq_relationship.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.transform.dense.bias', 'cls.predictions.decoder.weight', 'cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.weight']\n- This IS expected if you are initializing TFBertModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n- This IS NOT expected if you are initializing TFBertModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\nAll the weights of TFBertModel were initialized from the PyTorch model.\nIf your task is similar to the task the model of the checkpoint was trained on, you can already use TFBertModel for predictions without further training.\n","output_type":"stream"}]},{"cell_type":"code","source":"MAX_LEN = 128\ndef encode_texts(texts):\n    return tokenizer(\n        texts.tolist(), padding=True, truncation=True, max_length=MAX_LEN, return_tensors='tf'\n    )","metadata":{"papermill":{"duration":0.035993,"end_time":"2024-07-18T06:51:50.862693","exception":false,"start_time":"2024-07-18T06:51:50.826700","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:26:50.404803Z","iopub.execute_input":"2024-07-22T18:26:50.405087Z","iopub.status.idle":"2024-07-22T18:26:50.409885Z","shell.execute_reply.started":"2024-07-22T18:26:50.405062Z","shell.execute_reply":"2024-07-22T18:26:50.409002Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"train_hypotheses_enc = encode_texts(X_train['hypothesis'])\ntrain_premises_enc = encode_texts(X_train['premise'])\ntest_hypotheses_enc = encode_texts(X_test['hypothesis'])\ntest_premises_enc = encode_texts(X_test['premise'])","metadata":{"papermill":{"duration":18.085809,"end_time":"2024-07-18T06:52:09.023303","exception":false,"start_time":"2024-07-18T06:51:50.937494","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:26:50.412497Z","iopub.execute_input":"2024-07-22T18:26:50.412829Z","iopub.status.idle":"2024-07-22T18:26:54.475211Z","shell.execute_reply.started":"2024-07-22T18:26:50.412798Z","shell.execute_reply":"2024-07-22T18:26:54.474092Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"train_dataset = tf.data.Dataset.from_tensor_slices(\n    ((train_hypotheses_enc['input_ids'], train_hypotheses_enc['attention_mask'],\n      train_premises_enc['input_ids'], train_premises_enc['attention_mask']),\n     y_train)\n).shuffle(len(X_train)).batch(16)\n\ntest_dataset = tf.data.Dataset.from_tensor_slices(\n    ((test_hypotheses_enc['input_ids'], test_hypotheses_enc['attention_mask'],\n      test_premises_enc['input_ids'], test_premises_enc['attention_mask']),\n     y_test)\n).batch(16)","metadata":{"papermill":{"duration":0.051185,"end_time":"2024-07-18T06:52:09.098505","exception":false,"start_time":"2024-07-18T06:52:09.047320","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:26:54.476633Z","iopub.execute_input":"2024-07-22T18:26:54.477000Z","iopub.status.idle":"2024-07-22T18:26:54.500605Z","shell.execute_reply.started":"2024-07-22T18:26:54.476967Z","shell.execute_reply":"2024-07-22T18:26:54.499928Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"# class AttentionLayer(tf.keras.layers.Layer):\n#     def __init__(self, **kwargs):\n#         super(AttentionLayer, self).__init__(**kwargs)\n\n#     def build(self, input_shape):\n#         self.W = self.add_weight(name=\"att_weight\", shape=(input_shape[-1],), initializer=\"random_normal\")\n#         super(AttentionLayer, self).build(input_shape)\n\n#     def call(self, x):\n#         e = tf.keras.backend.tanh(tf.tensordot(x, self.W, axes=(2, 0)))\n#         a = tf.keras.backend.softmax(e)\n#         output = x * tf.expand_dims(a, -1)\n#         return tf.keras.backend.sum(output, axis=1)\n\n# def build_model():\n#     input_ids_hyp = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids_hyp')\n#     attention_mask_hyp = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask_hyp')\n#     input_ids_prem = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids_prem')\n#     attention_mask_prem = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask_prem')\n\n#     scibert_output_hyp = scibert_model(input_ids=input_ids_hyp, attention_mask=attention_mask_hyp)[0]\n#     scibert_output_prem = scibert_model(input_ids=input_ids_prem, attention_mask=attention_mask_prem)[0]\n\n#     lstm_hyp = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64, return_sequences=True))(scibert_output_hyp)\n#     lstm_prem = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64, return_sequences=True))(scibert_output_prem)\n\n#     att_hyp = AttentionLayer()(lstm_hyp)\n#     att_prem = AttentionLayer()(lstm_prem)\n\n#     concatenated = tf.keras.layers.Concatenate()([att_hyp, att_prem])\n\n#     dense = tf.keras.layers.Dense(64, activation='relu')(concatenated)\n#     output = tf.keras.layers.Dense(1, activation='sigmoid')(dense)\n\n#     model = tf.keras.Model(inputs=[input_ids_hyp, attention_mask_hyp, input_ids_prem, attention_mask_prem], outputs=output)\n\n#     model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-5),\n#                   loss='binary_crossentropy',\n#                   metrics=['accuracy'])\n    \n#     return model","metadata":{"papermill":{"duration":0.14576,"end_time":"2024-07-18T06:52:09.266859","exception":false,"start_time":"2024-07-18T06:52:09.121099","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:26:54.502127Z","iopub.execute_input":"2024-07-22T18:26:54.502534Z","iopub.status.idle":"2024-07-22T18:26:55.929767Z","shell.execute_reply.started":"2024-07-22T18:26:54.502502Z","shell.execute_reply":"2024-07-22T18:26:55.928917Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"class AttentionLayer(tf.keras.layers.Layer):\n    def __init__(self, **kwargs):\n        super(AttentionLayer, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        self.W = self.add_weight(name=\"att_weight\", shape=(input_shape[-1],), initializer=\"random_normal\")\n        super(AttentionLayer, self).build(input_shape)\n\n    def call(self, x):\n        e = tf.keras.backend.tanh(tf.tensordot(x, self.W, axes=(2, 0)))\n        a = tf.keras.backend.softmax(e)\n        output = x * tf.expand_dims(a, -1)\n        return tf.keras.backend.sum(output, axis=1)\n\ndef build_model_without_attention():\n    input_ids_hyp = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids_hyp')\n    attention_mask_hyp = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask_hyp')\n    input_ids_prem = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids_prem')\n    attention_mask_prem = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask_prem')\n\n    scibert_output_hyp = scibert_model(input_ids=input_ids_hyp, attention_mask=attention_mask_hyp)[0]\n    scibert_output_prem = scibert_model(input_ids=input_ids_prem, attention_mask=attention_mask_prem)[0]\n\n    lstm_hyp = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64, return_sequences=True))(scibert_output_hyp)\n    lstm_prem = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64, return_sequences=True))(scibert_output_prem)\n\n    # Apply global max pooling instead of attention\n    pooled_hyp = tf.keras.layers.GlobalMaxPooling1D()(lstm_hyp)\n    pooled_prem = tf.keras.layers.GlobalMaxPooling1D()(lstm_prem)\n\n    concatenated = tf.keras.layers.Concatenate()([pooled_hyp, pooled_prem])\n\n    dense = tf.keras.layers.Dense(64, activation='relu')(concatenated)\n    output = tf.keras.layers.Dense(1, activation='sigmoid')(dense)\n\n    model = tf.keras.Model(inputs=[input_ids_hyp, attention_mask_hyp, input_ids_prem, attention_mask_prem], outputs=output)\n\n    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-5),\n                  loss='binary_crossentropy',\n                  metrics=['accuracy'])\n    \n    return model\n\n# Instantiate the model\nmodel = build_model_without_attention()\n\n# Display the model summary\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-07-22T18:26:55.930974Z","iopub.execute_input":"2024-07-22T18:26:55.931277Z","iopub.status.idle":"2024-07-22T18:27:23.277355Z","shell.execute_reply.started":"2024-07-22T18:26:55.931253Z","shell.execute_reply":"2024-07-22T18:27:23.276460Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"Model: \"model\"\n__________________________________________________________________________________________________\n Layer (type)                Output Shape                 Param #   Connected to                  \n==================================================================================================\n input_ids_hyp (InputLayer)  [(None, 128)]                0         []                            \n                                                                                                  \n attention_mask_hyp (InputL  [(None, 128)]                0         []                            \n ayer)                                                                                            \n                                                                                                  \n input_ids_prem (InputLayer  [(None, 128)]                0         []                            \n )                                                                                                \n                                                                                                  \n attention_mask_prem (Input  [(None, 128)]                0         []                            \n Layer)                                                                                           \n                                                                                                  \n tf_bert_model (TFBertModel  TFBaseModelOutputWithPooli   1099184   ['input_ids_hyp[0][0]',       \n )                           ngAndCrossAttentions(last_   64         'attention_mask_hyp[0][0]',  \n                             hidden_state=(None, 128, 7              'input_ids_prem[0][0]',      \n                             68),                                    'attention_mask_prem[0][0]'] \n                              pooler_output=(None, 768)                                           \n                             , past_key_values=None, hi                                           \n                             dden_states=None, attentio                                           \n                             ns=None, cross_attentions=                                           \n                             None)                                                                \n                                                                                                  \n bidirectional (Bidirection  (None, 128, 128)             426496    ['tf_bert_model[0][0]']       \n al)                                                                                              \n                                                                                                  \n bidirectional_1 (Bidirecti  (None, 128, 128)             426496    ['tf_bert_model[1][0]']       \n onal)                                                                                            \n                                                                                                  \n global_max_pooling1d (Glob  (None, 128)                  0         ['bidirectional[0][0]']       \n alMaxPooling1D)                                                                                  \n                                                                                                  \n global_max_pooling1d_1 (Gl  (None, 128)                  0         ['bidirectional_1[0][0]']     \n obalMaxPooling1D)                                                                                \n                                                                                                  \n concatenate (Concatenate)   (None, 256)                  0         ['global_max_pooling1d[0][0]',\n                                                                     'global_max_pooling1d_1[0][0]\n                                                                    ']                            \n                                                                                                  \n dense (Dense)               (None, 64)                   16448     ['concatenate[0][0]']         \n                                                                                                  \n dense_1 (Dense)             (None, 1)                    65        ['dense[0][0]']               \n                                                                                                  \n==================================================================================================\nTotal params: 110787969 (422.62 MB)\nTrainable params: 110787969 (422.62 MB)\nNon-trainable params: 0 (0.00 Byte)\n__________________________________________________________________________________________________\n","output_type":"stream"}]},{"cell_type":"code","source":"model = build_model_without_attention()\nmodel.summary()","metadata":{"papermill":{"duration":32.848472,"end_time":"2024-07-18T06:52:42.148222","exception":false,"start_time":"2024-07-18T06:52:09.299750","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:27:23.278737Z","iopub.execute_input":"2024-07-22T18:27:23.279198Z","iopub.status.idle":"2024-07-22T18:27:40.838212Z","shell.execute_reply.started":"2024-07-22T18:27:23.279145Z","shell.execute_reply":"2024-07-22T18:27:40.837332Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"Model: \"model_1\"\n__________________________________________________________________________________________________\n Layer (type)                Output Shape                 Param #   Connected to                  \n==================================================================================================\n input_ids_hyp (InputLayer)  [(None, 128)]                0         []                            \n                                                                                                  \n attention_mask_hyp (InputL  [(None, 128)]                0         []                            \n ayer)                                                                                            \n                                                                                                  \n input_ids_prem (InputLayer  [(None, 128)]                0         []                            \n )                                                                                                \n                                                                                                  \n attention_mask_prem (Input  [(None, 128)]                0         []                            \n Layer)                                                                                           \n                                                                                                  \n tf_bert_model (TFBertModel  TFBaseModelOutputWithPooli   1099184   ['input_ids_hyp[0][0]',       \n )                           ngAndCrossAttentions(last_   64         'attention_mask_hyp[0][0]',  \n                             hidden_state=(None, 128, 7              'input_ids_prem[0][0]',      \n                             68),                                    'attention_mask_prem[0][0]'] \n                              pooler_output=(None, 768)                                           \n                             , past_key_values=None, hi                                           \n                             dden_states=None, attentio                                           \n                             ns=None, cross_attentions=                                           \n                             None)                                                                \n                                                                                                  \n bidirectional_2 (Bidirecti  (None, 128, 128)             426496    ['tf_bert_model[2][0]']       \n onal)                                                                                            \n                                                                                                  \n bidirectional_3 (Bidirecti  (None, 128, 128)             426496    ['tf_bert_model[3][0]']       \n onal)                                                                                            \n                                                                                                  \n global_max_pooling1d_2 (Gl  (None, 128)                  0         ['bidirectional_2[0][0]']     \n obalMaxPooling1D)                                                                                \n                                                                                                  \n global_max_pooling1d_3 (Gl  (None, 128)                  0         ['bidirectional_3[0][0]']     \n obalMaxPooling1D)                                                                                \n                                                                                                  \n concatenate_1 (Concatenate  (None, 256)                  0         ['global_max_pooling1d_2[0][0]\n )                                                                  ',                            \n                                                                     'global_max_pooling1d_3[0][0]\n                                                                    ']                            \n                                                                                                  \n dense_2 (Dense)             (None, 64)                   16448     ['concatenate_1[0][0]']       \n                                                                                                  \n dense_3 (Dense)             (None, 1)                    65        ['dense_2[0][0]']             \n                                                                                                  \n==================================================================================================\nTotal params: 110787969 (422.62 MB)\nTrainable params: 110787969 (422.62 MB)\nNon-trainable params: 0 (0.00 Byte)\n__________________________________________________________________________________________________\n","output_type":"stream"}]},{"cell_type":"code","source":"tf.keras.utils.plot_model(model,to_file='multi-task_model_without_attention.png', show_shapes=True)","metadata":{"papermill":{"duration":0.387944,"end_time":"2024-07-18T06:52:42.562245","exception":false,"start_time":"2024-07-18T06:52:42.174301","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:27:40.839580Z","iopub.execute_input":"2024-07-22T18:27:40.840243Z","iopub.status.idle":"2024-07-22T18:27:41.523125Z","shell.execute_reply.started":"2024-07-22T18:27:40.840207Z","shell.execute_reply":"2024-07-22T18:27:41.522230Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"image/png":"","text/plain":"<IPython.core.display.Image object>"},"metadata":{}}]},{"cell_type":"code","source":"class_weights = class_weight.compute_class_weight('balanced', classes=np.unique(y_train), y=y_train)\nclass_weights = {i : class_weights[i] for i in range(len(class_weights))}","metadata":{"papermill":{"duration":0.073863,"end_time":"2024-07-18T06:52:42.666966","exception":false,"start_time":"2024-07-18T06:52:42.593103","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:27:41.526620Z","iopub.execute_input":"2024-07-22T18:27:41.526916Z","iopub.status.idle":"2024-07-22T18:27:41.542814Z","shell.execute_reply.started":"2024-07-22T18:27:41.526891Z","shell.execute_reply":"2024-07-22T18:27:41.542131Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"import keras\nimport tensorflow as tf\nmy_callbacks = [\n    tf.keras.callbacks.EarlyStopping(patience=3),\n    tf.keras.callbacks.ModelCheckpoint(filepath='model.{epoch:02d}-{val_loss:.2f}.keras', save_best_only=True, monitor='val_loss', mode='min'),\n    tf.keras.callbacks.TensorBoard(log_dir='./logs')\n]","metadata":{"papermill":{"duration":0.041235,"end_time":"2024-07-18T06:52:42.739255","exception":false,"start_time":"2024-07-18T06:52:42.698020","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:27:41.543830Z","iopub.execute_input":"2024-07-22T18:27:41.544093Z","iopub.status.idle":"2024-07-22T18:27:41.551709Z","shell.execute_reply.started":"2024-07-22T18:27:41.544070Z","shell.execute_reply":"2024-07-22T18:27:41.550945Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"model.fit(train_dataset, epochs=10, validation_data=test_dataset, class_weight=class_weights)","metadata":{"papermill":{"duration":38197.105713,"end_time":"2024-07-18T17:29:19.876947","exception":false,"start_time":"2024-07-18T06:52:42.771234","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-22T18:27:41.552812Z","iopub.execute_input":"2024-07-22T18:27:41.553158Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Epoch 1/10\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1721672967.811858     154 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":" 46/875 [>.............................] - ETA: 10:33 - loss: 0.6866 - accuracy: 0.5489","output_type":"stream"}]},{"cell_type":"code","source":"y_pred = model.predict(test_dataset)\ny_pred = np.round(y_pred).flatten()","metadata":{"papermill":{"duration":512.993957,"end_time":"2024-07-18T17:37:56.524435","exception":false,"start_time":"2024-07-18T17:29:23.530478","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import f1_score, accuracy_score, precision_score, recall_score, confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"papermill":{"duration":3.795246,"end_time":"2024-07-18T17:38:04.060598","exception":false,"start_time":"2024-07-18T17:38:00.265352","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"f1 = f1_score(y_test, y_pred)\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)\n\nprint(f\"Test F1 Score: {f1}\")\nprint(f\"Test Accuracy: {accuracy}\")\nprint(f\"Test Precision: {precision}\")\nprint(f\"Test Recall: {recall}\")","metadata":{"papermill":{"duration":3.748143,"end_time":"2024-07-18T17:38:11.523009","exception":false,"start_time":"2024-07-18T17:38:07.774866","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cm = confusion_matrix(y_test, y_pred)\n\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Non-Contradicting', 'Contradicting'], yticklabels=['Non-Contradicting', 'Contradicting'])\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"papermill":{"duration":4.120415,"end_time":"2024-07-18T17:38:19.177132","exception":false,"start_time":"2024-07-18T17:38:15.056717","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def predict_contradiction(hypothesis, premise, model):\n    # Encode hypothesis\n    hyp_enc = tokenizer(\n        hypothesis,\n        padding='max_length',\n        truncation=True,\n        max_length=128,\n        return_tensors='tf'\n    )\n\n    # Encode premise\n    prem_enc = tokenizer(\n        premise,\n        padding='max_length',\n        truncation=True,\n        max_length=128,\n        return_tensors='tf'\n    )\n\n    # Prepare the inputs dictionary for the model\n    inputs = {\n        'input_ids_hyp': hyp_enc['input_ids'],\n        'attention_mask_hyp': hyp_enc['attention_mask'],\n        'input_ids_prem': prem_enc['input_ids'],\n        'attention_mask_prem': prem_enc['attention_mask']\n    }\n\n    # Get the prediction from the model\n    prediction = model.predict(inputs)\n\n    # Convert prediction to binary outcome\n    result = 'contradicting' if prediction[0][0] > 0.5 else 'non-contradicting'\n    return result","metadata":{"papermill":{"duration":3.735379,"end_time":"2024-07-18T17:38:26.577991","exception":false,"start_time":"2024-07-18T17:38:22.842612","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test the function with example inputs\nhypothesis = \"2 .this paper is not very easy to follow .\"\npremise = \"this paper is well written and the information is very intensive whereby closely related works are well covered .\"\n\n# Get the prediction\nresult = predict_contradiction(hypothesis, premise, model)\nprint(f\"The prediction is: {result}\")","metadata":{"papermill":{"duration":31.992337,"end_time":"2024-07-18T17:39:02.091572","exception":false,"start_time":"2024-07-18T17:38:30.099235","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test the function with example inputs\nhypothesis = \"further the paper makes several misleading claims .\"\npremise = \"the paper is rather well written but it strongly lacks precision about the proposed method .\"\n\n# Get the prediction\nresult = predict_contradiction(hypothesis, premise, model)\nprint(f\"The prediction is: {result}\")","metadata":{"papermill":{"duration":3.744628,"end_time":"2024-07-18T17:39:09.634546","exception":false,"start_time":"2024-07-18T17:39:05.889918","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test the function with example inputs\nhypothesis = \"to summarize i think this paper give some empirical support for the effectiveness of is yet the theoretical side is not ready .\"\npremise = \"this paper is decently written and the experimental results look promising .\"\n\n# Get the prediction\nresult = predict_contradiction(hypothesis, premise, model)\nprint(f\"The prediction is: {result}\")","metadata":{"papermill":{"duration":3.912904,"end_time":"2024-07-18T17:39:17.391884","exception":false,"start_time":"2024-07-18T17:39:13.478980","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test the function with example inputs\nhypothesis = \"this paper reads well and the results appear sound .\"\npremise = \"2 choosing 10 % triples as positive training examples seems very ad-hoc .\"\n\n# Get the prediction\nresult = predict_contradiction(hypothesis, premise, model)\nprint(f\"The prediction is: {result}\")","metadata":{"papermill":{"duration":3.995964,"end_time":"2024-07-18T17:39:24.941788","exception":false,"start_time":"2024-07-18T17:39:20.945824","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test the function with example inputs\nhypothesis = \"some important explanation of the methods is missing .\"\npremise = \"beyond this the experimental performance of the authors ' method seems quite good on the tasks considered and at least a substantial subset of the baselines considered are recent .\"\n\n# Get the prediction\nresult = predict_contradiction(hypothesis, premise, model)\nprint(f\"The prediction is: {result}\")","metadata":{"papermill":{"duration":3.904069,"end_time":"2024-07-18T17:39:32.387405","exception":false,"start_time":"2024-07-18T17:39:28.483336","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test the function with example inputs\nhypothesis = \"although it looks to me that leveraging drop-out in neural networks to better learn the feature-based model to help cold-start is a great idea in this paper the methodology is not clearly written to be fully convincing .\"\npremise = \"beyond this the experimental performance of the authors ' method seems quite good on the tasks considered and at least a substantial subset of the baselines considered are recent .\"\n\n# Get the prediction\nresult = predict_contradiction(hypothesis, premise, model)\nprint(f\"The prediction is: {result}\")","metadata":{"papermill":{"duration":3.699424,"end_time":"2024-07-18T17:39:39.828552","exception":false,"start_time":"2024-07-18T17:39:36.129128","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test the function with example inputs\nhypothesis = \"on the back of so much hope and expectation built-up in the introduction the solution put forward in the paper strikes us as a curious but a hardly useful toy .\"\npremise = \"overall evaluation the core idea is novel simple and extensive tests show that it is effective .\"\n\n# Get the prediction\nresult = predict_contradiction(hypothesis, premise, model)\nprint(f\"The prediction is: {result}\")","metadata":{"papermill":{"duration":3.691265,"end_time":"2024-07-18T17:39:47.310616","exception":false,"start_time":"2024-07-18T17:39:43.619351","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test the function with example inputs\nhypothesis = \"2 not too many qualitative results are provided for each experiment \"\npremise = \"overall evaluation the core idea is novel simple and extensive tests show that it is effective .\"\n\n# Get the prediction\nresult = predict_contradiction(hypothesis, premise, model)\nprint(f\"The prediction is: {result}\")","metadata":{"papermill":{"duration":3.947738,"end_time":"2024-07-18T17:39:55.008227","exception":false,"start_time":"2024-07-18T17:39:51.060489","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test the function with example inputs\nhypothesis = \" the paper is well motivated and clearly written .\"\npremise = \"the motivation of the paper would be much better tested on these tasks .\"\n\n# Get the prediction\nresult = predict_contradiction(hypothesis, premise, model)\nprint(f\"The prediction is: {result}\")","metadata":{"papermill":{"duration":3.905953,"end_time":"2024-07-18T17:40:02.450446","exception":false,"start_time":"2024-07-18T17:39:58.544493","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test the function with example inputs\nhypothesis = \" addition are unclear .\"\npremise = \" good experimental performance on multiple sequence modeling tasks including addition multiplication and sequence mnist .\"\n\n# Get the prediction\nresult = predict_contradiction(hypothesis, premise, model)\nprint(f\"The prediction is: {result}\")","metadata":{"papermill":{"duration":3.768394,"end_time":"2024-07-18T17:40:09.989317","exception":false,"start_time":"2024-07-18T17:40:06.220923","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test the function with example inputs\nhypothesis = \"one drawback is that the main computations are only tractable in toy domains - it would be good if they discussed how to use this with general neural model with large state spaces e.g .states obtained with an rnn .\"\npremise = \"the topic is very interesting and not studied enough the proposed method looks novel and the experimental results look promising .\"\n\n# Get the prediction\nresult = predict_contradiction(hypothesis, premise, model)\nprint(f\"The prediction is: {result}\")","metadata":{"papermill":{"duration":3.680569,"end_time":"2024-07-18T17:40:17.464600","exception":false,"start_time":"2024-07-18T17:40:13.784031","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pickle\nfrom transformers import TFAutoModel, AutoTokenizer\n\n# Initialize the tokenizer and model\ntokenizer = AutoTokenizer.from_pretrained(\"allenai/scibert_scivocab_uncased\")\nscibert_model = TFAutoModel.from_pretrained(\"allenai/scibert_scivocab_uncased\", from_pt=True)\n\n\n# Function to save the model weights to a pickle file\ndef save_model_weights_to_pickle(model, file_path):\n    # Get the model weights\n    model_weights = model.get_weights()\n    \n    # Save the model weights to a pickle file\n    with open(file_path, 'wb') as file:\n        pickle.dump(model_weights, file)\n    print(f\"Model weights saved to {file_path}\")\n\n# File path to save the model weights\nweights_file_path = '/kaggle/working/model_weights.pkl'\n\n# Save the model weights\nsave_model_weights_to_pickle(scibert_model, weights_file_path)","metadata":{"papermill":{"duration":7.067632,"end_time":"2024-07-18T17:40:28.275448","exception":false,"start_time":"2024-07-18T17:40:21.207816","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}