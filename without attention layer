{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cfd63a67",
   "metadata": {
    "papermill": {
     "duration": 0.018289,
     "end_time": "2024-08-15T05:28:04.643923",
     "exception": false,
     "start_time": "2024-08-15T05:28:04.625634",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b7b98237",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:04.681809Z",
     "iopub.status.busy": "2024-08-15T05:28:04.681159Z",
     "iopub.status.idle": "2024-08-15T05:28:18.166629Z",
     "shell.execute_reply": "2024-08-15T05:28:18.165534Z"
    },
    "papermill": {
     "duration": 13.507149,
     "end_time": "2024-08-15T05:28:18.169202",
     "exception": false,
     "start_time": "2024-08-15T05:28:04.662053",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting keras_preprocessing\r\n",
      "  Downloading Keras_Preprocessing-1.1.2-py2.py3-none-any.whl.metadata (1.9 kB)\r\n",
      "Requirement already satisfied: numpy>=1.9.1 in /opt/conda/lib/python3.10/site-packages (from keras_preprocessing) (1.26.4)\r\n",
      "Requirement already satisfied: six>=1.9.0 in /opt/conda/lib/python3.10/site-packages (from keras_preprocessing) (1.16.0)\r\n",
      "Downloading Keras_Preprocessing-1.1.2-py2.py3-none-any.whl (42 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.6/42.6 kB\u001b[0m \u001b[31m1.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: keras_preprocessing\r\n",
      "Successfully installed keras_preprocessing-1.1.2\r\n"
     ]
    }
   ],
   "source": [
    "!pip install keras_preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5fcd0d89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:18.209105Z",
     "iopub.status.busy": "2024-08-15T05:28:18.208781Z",
     "iopub.status.idle": "2024-08-15T05:28:19.953510Z",
     "shell.execute_reply": "2024-08-15T05:28:19.952551Z"
    },
    "papermill": {
     "duration": 1.768227,
     "end_time": "2024-08-15T05:28:19.956328",
     "exception": false,
     "start_time": "2024-08-15T05:28:18.188101",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.utils import class_weight"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a00d8ec",
   "metadata": {
    "papermill": {
     "duration": 0.018171,
     "end_time": "2024-08-15T05:28:19.996659",
     "exception": false,
     "start_time": "2024-08-15T05:28:19.978488",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2153b4a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:20.035357Z",
     "iopub.status.busy": "2024-08-15T05:28:20.034361Z",
     "iopub.status.idle": "2024-08-15T05:28:20.192095Z",
     "shell.execute_reply": "2024-08-15T05:28:20.191083Z"
    },
    "papermill": {
     "duration": 0.1797,
     "end_time": "2024-08-15T05:28:20.194597",
     "exception": false,
     "start_time": "2024-08-15T05:28:20.014897",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/balanced-dataset/balanced_data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8130dfd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:20.233192Z",
     "iopub.status.busy": "2024-08-15T05:28:20.232888Z",
     "iopub.status.idle": "2024-08-15T05:28:20.253245Z",
     "shell.execute_reply": "2024-08-15T05:28:20.252441Z"
    },
    "papermill": {
     "duration": 0.041765,
     "end_time": "2024-08-15T05:28:20.255136",
     "exception": false,
     "start_time": "2024-08-15T05:28:20.213371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hypothesis</th>\n",
       "      <th>premise</th>\n",
       "      <th>s1</th>\n",
       "      <th>s2</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>the paper is clearly written and to my knowled...</td>\n",
       "      <td>while the paper is very clear with respects to...</td>\n",
       "      <td>negative</td>\n",
       "      <td>positive</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>trannorm is well motivated separately normaliz...</td>\n",
       "      <td>this line of attack against the domain-adaptat...</td>\n",
       "      <td>negative</td>\n",
       "      <td>positive</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>active perception and more specifically recog...</td>\n",
       "      <td>i am not convinced about the novelty and contr...</td>\n",
       "      <td>negative</td>\n",
       "      <td>positive</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>in other words the proposed method makes sense...</td>\n",
       "      <td>the topic of the paper is interesting and the ...</td>\n",
       "      <td>negative</td>\n",
       "      <td>positive</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>- experimental results are quite promising as ...</td>\n",
       "      <td>furthermore evaluations seem rather noisy to m...</td>\n",
       "      <td>negative</td>\n",
       "      <td>positive</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          hypothesis  \\\n",
       "0  the paper is clearly written and to my knowled...   \n",
       "1  trannorm is well motivated separately normaliz...   \n",
       "2   active perception and more specifically recog...   \n",
       "3  in other words the proposed method makes sense...   \n",
       "4  - experimental results are quite promising as ...   \n",
       "\n",
       "                                             premise        s1        s2  \\\n",
       "0  while the paper is very clear with respects to...  negative  positive   \n",
       "1  this line of attack against the domain-adaptat...  negative  positive   \n",
       "2  i am not convinced about the novelty and contr...  negative  positive   \n",
       "3  the topic of the paper is interesting and the ...  negative  positive   \n",
       "4  furthermore evaluations seem rather noisy to m...  negative  positive   \n",
       "\n",
       "   label  \n",
       "0      1  \n",
       "1      1  \n",
       "2      1  \n",
       "3      1  \n",
       "4      1  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "09499b08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:20.294558Z",
     "iopub.status.busy": "2024-08-15T05:28:20.293758Z",
     "iopub.status.idle": "2024-08-15T05:28:20.306022Z",
     "shell.execute_reply": "2024-08-15T05:28:20.304937Z"
    },
    "papermill": {
     "duration": 0.034329,
     "end_time": "2024-08-15T05:28:20.308277",
     "exception": false,
     "start_time": "2024-08-15T05:28:20.273948",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows where 'label' is 0: 16007\n",
      "Number of rows where 'label' is 1: 5725\n"
     ]
    }
   ],
   "source": [
    "count_0 = df[df['label'] == 0].shape[0]\n",
    "\n",
    "count_1 = df[df['label'] == 1].shape[0]\n",
    "\n",
    "print(\"Number of rows where 'label' is 0:\", count_0)\n",
    "print(\"Number of rows where 'label' is 1:\", count_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cfc4b2bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:20.350567Z",
     "iopub.status.busy": "2024-08-15T05:28:20.349829Z",
     "iopub.status.idle": "2024-08-15T05:28:20.355592Z",
     "shell.execute_reply": "2024-08-15T05:28:20.354631Z"
    },
    "papermill": {
     "duration": 0.027828,
     "end_time": "2024-08-15T05:28:20.357469",
     "exception": false,
     "start_time": "2024-08-15T05:28:20.329641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(21732, 5)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "daa98723",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:20.396268Z",
     "iopub.status.busy": "2024-08-15T05:28:20.396024Z",
     "iopub.status.idle": "2024-08-15T05:28:20.403329Z",
     "shell.execute_reply": "2024-08-15T05:28:20.402536Z"
    },
    "papermill": {
     "duration": 0.028667,
     "end_time": "2024-08-15T05:28:20.405179",
     "exception": false,
     "start_time": "2024-08-15T05:28:20.376512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df[['hypothesis', 'premise']]\n",
    "y = df['label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e48a1122",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:20.443386Z",
     "iopub.status.busy": "2024-08-15T05:28:20.443139Z",
     "iopub.status.idle": "2024-08-15T05:28:20.933701Z",
     "shell.execute_reply": "2024-08-15T05:28:20.932923Z"
    },
    "papermill": {
     "duration": 0.51225,
     "end_time": "2024-08-15T05:28:20.935905",
     "exception": false,
     "start_time": "2024-08-15T05:28:20.423655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from imblearn.over_sampling import RandomOverSampler\n",
    "ros = RandomOverSampler(random_state=42)\n",
    "X_resampled, y_resampled = ros.fit_resample(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "06129840",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:20.974385Z",
     "iopub.status.busy": "2024-08-15T05:28:20.974009Z",
     "iopub.status.idle": "2024-08-15T05:28:20.979093Z",
     "shell.execute_reply": "2024-08-15T05:28:20.978374Z"
    },
    "papermill": {
     "duration": 0.026252,
     "end_time": "2024-08-15T05:28:20.980981",
     "exception": false,
     "start_time": "2024-08-15T05:28:20.954729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.DataFrame({\n",
    "    'hypothesis': X_resampled['hypothesis'],\n",
    "    'premise': X_resampled['premise'],\n",
    "    'label': y_resampled\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dfd2c0c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:21.019011Z",
     "iopub.status.busy": "2024-08-15T05:28:21.018732Z",
     "iopub.status.idle": "2024-08-15T05:28:21.023869Z",
     "shell.execute_reply": "2024-08-15T05:28:21.023108Z"
    },
    "papermill": {
     "duration": 0.026175,
     "end_time": "2024-08-15T05:28:21.025805",
     "exception": false,
     "start_time": "2024-08-15T05:28:20.999630",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(32014, 3)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0755450f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:21.064633Z",
     "iopub.status.busy": "2024-08-15T05:28:21.063978Z",
     "iopub.status.idle": "2024-08-15T05:28:21.072847Z",
     "shell.execute_reply": "2024-08-15T05:28:21.072048Z"
    },
    "papermill": {
     "duration": 0.030434,
     "end_time": "2024-08-15T05:28:21.074644",
     "exception": false,
     "start_time": "2024-08-15T05:28:21.044210",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hypothesis</th>\n",
       "      <th>premise</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>the paper is clearly written and to my knowled...</td>\n",
       "      <td>while the paper is very clear with respects to...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>trannorm is well motivated separately normaliz...</td>\n",
       "      <td>this line of attack against the domain-adaptat...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>active perception and more specifically recog...</td>\n",
       "      <td>i am not convinced about the novelty and contr...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>in other words the proposed method makes sense...</td>\n",
       "      <td>the topic of the paper is interesting and the ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>- experimental results are quite promising as ...</td>\n",
       "      <td>furthermore evaluations seem rather noisy to m...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          hypothesis  \\\n",
       "0  the paper is clearly written and to my knowled...   \n",
       "1  trannorm is well motivated separately normaliz...   \n",
       "2   active perception and more specifically recog...   \n",
       "3  in other words the proposed method makes sense...   \n",
       "4  - experimental results are quite promising as ...   \n",
       "\n",
       "                                             premise  label  \n",
       "0  while the paper is very clear with respects to...      1  \n",
       "1  this line of attack against the domain-adaptat...      1  \n",
       "2  i am not convinced about the novelty and contr...      1  \n",
       "3  the topic of the paper is interesting and the ...      1  \n",
       "4  furthermore evaluations seem rather noisy to m...      1  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "124c80aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:21.113365Z",
     "iopub.status.busy": "2024-08-15T05:28:21.112691Z",
     "iopub.status.idle": "2024-08-15T05:28:21.122154Z",
     "shell.execute_reply": "2024-08-15T05:28:21.121215Z"
    },
    "papermill": {
     "duration": 0.030714,
     "end_time": "2024-08-15T05:28:21.124078",
     "exception": false,
     "start_time": "2024-08-15T05:28:21.093364",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows where 'label' is 0: 16007\n",
      "Number of rows where 'label' is 1: 16007\n"
     ]
    }
   ],
   "source": [
    "count_0 = df[df['label'] == 0].shape[0]\n",
    "\n",
    "count_1 = df[df['label'] == 1].shape[0]\n",
    "\n",
    "print(\"Number of rows where 'label' is 0:\", count_0)\n",
    "print(\"Number of rows where 'label' is 1:\", count_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2b40a3a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:21.163734Z",
     "iopub.status.busy": "2024-08-15T05:28:21.163467Z",
     "iopub.status.idle": "2024-08-15T05:28:21.167486Z",
     "shell.execute_reply": "2024-08-15T05:28:21.166532Z"
    },
    "papermill": {
     "duration": 0.025945,
     "end_time": "2024-08-15T05:28:21.169494",
     "exception": false,
     "start_time": "2024-08-15T05:28:21.143549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b0965336",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:21.208846Z",
     "iopub.status.busy": "2024-08-15T05:28:21.208608Z",
     "iopub.status.idle": "2024-08-15T05:28:21.213783Z",
     "shell.execute_reply": "2024-08-15T05:28:21.212930Z"
    },
    "papermill": {
     "duration": 0.02667,
     "end_time": "2024-08-15T05:28:21.215696",
     "exception": false,
     "start_time": "2024-08-15T05:28:21.189026",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df[['hypothesis','premise']]\n",
    "y = df['label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "300d435d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:21.255841Z",
     "iopub.status.busy": "2024-08-15T05:28:21.255348Z",
     "iopub.status.idle": "2024-08-15T05:28:21.264476Z",
     "shell.execute_reply": "2024-08-15T05:28:21.263758Z"
    },
    "papermill": {
     "duration": 0.030722,
     "end_time": "2024-08-15T05:28:21.266374",
     "exception": false,
     "start_time": "2024-08-15T05:28:21.235652",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f2a53571",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:21.306385Z",
     "iopub.status.busy": "2024-08-15T05:28:21.306118Z",
     "iopub.status.idle": "2024-08-15T05:28:36.856909Z",
     "shell.execute_reply": "2024-08-15T05:28:36.856095Z"
    },
    "papermill": {
     "duration": 15.573666,
     "end_time": "2024-08-15T05:28:36.859442",
     "exception": false,
     "start_time": "2024-08-15T05:28:21.285776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-15 05:28:27.633413: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-08-15 05:28:27.633522: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-08-15 05:28:27.760800: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "from transformers import AutoTokenizer, TFAutoModel\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0fed7d50",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:36.899318Z",
     "iopub.status.busy": "2024-08-15T05:28:36.898761Z",
     "iopub.status.idle": "2024-08-15T05:28:54.118015Z",
     "shell.execute_reply": "2024-08-15T05:28:54.117285Z"
    },
    "papermill": {
     "duration": 17.241225,
     "end_time": "2024-08-15T05:28:54.120010",
     "exception": false,
     "start_time": "2024-08-15T05:28:36.878785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7ede5f4d534845c1b9b026d87574f344",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/385 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e984bcfd6eaa4e978e983799cdb77baa",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.txt:   0%|          | 0.00/228k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "24c369911ce14609853a65ecf30e4844",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "pytorch_model.bin:   0%|          | 0.00/442M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torch/_utils.py:831: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()\n",
      "  return self.fget.__get__(instance, owner)()\n",
      "Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFBertModel: ['cls.predictions.decoder.weight', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.bias', 'cls.predictions.transform.dense.bias', 'cls.predictions.bias', 'cls.seq_relationship.weight', 'cls.seq_relationship.bias']\n",
      "- This IS expected if you are initializing TFBertModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n",
      "- This IS NOT expected if you are initializing TFBertModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\n",
      "All the weights of TFBertModel were initialized from the PyTorch model.\n",
      "If your task is similar to the task the model of the checkpoint was trained on, you can already use TFBertModel for predictions without further training.\n"
     ]
    }
   ],
   "source": [
    "tokenizer = AutoTokenizer.from_pretrained(\"allenai/scibert_scivocab_uncased\")\n",
    "scibert_model = TFAutoModel.from_pretrained(\"allenai/scibert_scivocab_uncased\", from_pt=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "11f07697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:54.161784Z",
     "iopub.status.busy": "2024-08-15T05:28:54.161203Z",
     "iopub.status.idle": "2024-08-15T05:28:54.165870Z",
     "shell.execute_reply": "2024-08-15T05:28:54.165040Z"
    },
    "papermill": {
     "duration": 0.027507,
     "end_time": "2024-08-15T05:28:54.167714",
     "exception": false,
     "start_time": "2024-08-15T05:28:54.140207",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "MAX_LEN = 128\n",
    "def encode_texts(texts):\n",
    "    return tokenizer(\n",
    "        texts.tolist(), padding=True, truncation=True, max_length=MAX_LEN, return_tensors='tf'\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "cf8bd1e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:28:54.208363Z",
     "iopub.status.busy": "2024-08-15T05:28:54.208092Z",
     "iopub.status.idle": "2024-08-15T05:29:00.298229Z",
     "shell.execute_reply": "2024-08-15T05:29:00.297440Z"
    },
    "papermill": {
     "duration": 6.113129,
     "end_time": "2024-08-15T05:29:00.300488",
     "exception": false,
     "start_time": "2024-08-15T05:28:54.187359",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_hypotheses_enc = encode_texts(X_train['hypothesis'])\n",
    "train_premises_enc = encode_texts(X_train['premise'])\n",
    "test_hypotheses_enc = encode_texts(X_test['hypothesis'])\n",
    "test_premises_enc = encode_texts(X_test['premise'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9f31efc8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:29:00.382221Z",
     "iopub.status.busy": "2024-08-15T05:29:00.381590Z",
     "iopub.status.idle": "2024-08-15T05:29:00.403360Z",
     "shell.execute_reply": "2024-08-15T05:29:00.402660Z"
    },
    "papermill": {
     "duration": 0.04495,
     "end_time": "2024-08-15T05:29:00.405258",
     "exception": false,
     "start_time": "2024-08-15T05:29:00.360308",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_dataset = tf.data.Dataset.from_tensor_slices(\n",
    "    ((train_hypotheses_enc['input_ids'], train_hypotheses_enc['attention_mask'],\n",
    "      train_premises_enc['input_ids'], train_premises_enc['attention_mask']),\n",
    "     y_train)\n",
    ").shuffle(len(X_train)).batch(16)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices(\n",
    "    ((test_hypotheses_enc['input_ids'], test_hypotheses_enc['attention_mask'],\n",
    "      test_premises_enc['input_ids'], test_premises_enc['attention_mask']),\n",
    "     y_test)\n",
    ").batch(16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8ef76fdc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:29:00.446822Z",
     "iopub.status.busy": "2024-08-15T05:29:00.446565Z",
     "iopub.status.idle": "2024-08-15T05:29:00.553303Z",
     "shell.execute_reply": "2024-08-15T05:29:00.552629Z"
    },
    "papermill": {
     "duration": 0.129354,
     "end_time": "2024-08-15T05:29:00.555125",
     "exception": false,
     "start_time": "2024-08-15T05:29:00.425771",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class AttentionLayer(tf.keras.layers.Layer):\n",
    "    def __init__(self, **kwargs):\n",
    "        super(AttentionLayer, self).__init__(**kwargs)\n",
    "\n",
    "    def build(self, input_shape):\n",
    "        self.W = self.add_weight(name=\"att_weight\", shape=(input_shape[-1],), initializer=\"random_normal\")\n",
    "        super(AttentionLayer, self).build(input_shape)\n",
    "\n",
    "    def call(self, x):\n",
    "        e = tf.keras.backend.tanh(tf.tensordot(x, self.W, axes=(2, 0)))\n",
    "        a = tf.keras.backend.softmax(e)\n",
    "        output = x * tf.expand_dims(a, -1)\n",
    "        return tf.keras.backend.sum(output, axis=1)\n",
    "\n",
    "# Assuming scibert_model is your TFBertModel already defined elsewhere\n",
    "def build_model():\n",
    "    input_ids_hyp = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids_hyp')\n",
    "    attention_mask_hyp = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask_hyp')\n",
    "    input_ids_prem = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids_prem')\n",
    "    attention_mask_prem = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask_prem')\n",
    "\n",
    "    # Get outputs from the SciBERT model\n",
    "    scibert_output_hyp = scibert_model(input_ids=input_ids_hyp, attention_mask=attention_mask_hyp)[0]\n",
    "    scibert_output_prem = scibert_model(input_ids=input_ids_prem, attention_mask=attention_mask_prem)[0]\n",
    "\n",
    "    # Apply BiLSTM layers directly\n",
    "    lstm_hyp = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64, return_sequences=False))(scibert_output_hyp)\n",
    "    lstm_prem = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64, return_sequences=False))(scibert_output_prem)\n",
    "\n",
    "    # Concatenate the BiLSTM outputs directly\n",
    "    concatenated = tf.keras.layers.Concatenate()([lstm_hyp, lstm_prem])\n",
    "\n",
    "    # Add a Dense layer and the final output layer\n",
    "    dense = tf.keras.layers.Dense(64, activation='relu')(concatenated)\n",
    "    output = tf.keras.layers.Dense(1, activation='sigmoid')(dense)\n",
    "\n",
    "    # Define the model\n",
    "    model = tf.keras.Model(\n",
    "        inputs=[input_ids_hyp, attention_mask_hyp, input_ids_prem, attention_mask_prem], \n",
    "        outputs=output\n",
    "    )\n",
    "\n",
    "    # Compile the model\n",
    "    model.compile(\n",
    "        optimizer=tf.keras.optimizers.Adam(learning_rate=1e-5),\n",
    "        loss='binary_crossentropy',\n",
    "        metrics=['accuracy']\n",
    "    )\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fef886e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:29:00.596164Z",
     "iopub.status.busy": "2024-08-15T05:29:00.595680Z",
     "iopub.status.idle": "2024-08-15T05:29:29.284825Z",
     "shell.execute_reply": "2024-08-15T05:29:29.283742Z"
    },
    "papermill": {
     "duration": 28.712273,
     "end_time": "2024-08-15T05:29:29.287196",
     "exception": false,
     "start_time": "2024-08-15T05:29:00.574923",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "__________________________________________________________________________________________________\n",
      " Layer (type)                Output Shape                 Param #   Connected to                  \n",
      "==================================================================================================\n",
      " input_ids_hyp (InputLayer)  [(None, 128)]                0         []                            \n",
      "                                                                                                  \n",
      " attention_mask_hyp (InputL  [(None, 128)]                0         []                            \n",
      " ayer)                                                                                            \n",
      "                                                                                                  \n",
      " input_ids_prem (InputLayer  [(None, 128)]                0         []                            \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " attention_mask_prem (Input  [(None, 128)]                0         []                            \n",
      " Layer)                                                                                           \n",
      "                                                                                                  \n",
      " tf_bert_model (TFBertModel  TFBaseModelOutputWithPooli   1099184   ['input_ids_hyp[0][0]',       \n",
      " )                           ngAndCrossAttentions(last_   64         'attention_mask_hyp[0][0]',  \n",
      "                             hidden_state=(None, 128, 7              'input_ids_prem[0][0]',      \n",
      "                             68),                                    'attention_mask_prem[0][0]'] \n",
      "                              pooler_output=(None, 768)                                           \n",
      "                             , past_key_values=None, hi                                           \n",
      "                             dden_states=None, attentio                                           \n",
      "                             ns=None, cross_attentions=                                           \n",
      "                             None)                                                                \n",
      "                                                                                                  \n",
      " bidirectional (Bidirection  (None, 128)                  426496    ['tf_bert_model[0][0]']       \n",
      " al)                                                                                              \n",
      "                                                                                                  \n",
      " bidirectional_1 (Bidirecti  (None, 128)                  426496    ['tf_bert_model[1][0]']       \n",
      " onal)                                                                                            \n",
      "                                                                                                  \n",
      " concatenate (Concatenate)   (None, 256)                  0         ['bidirectional[0][0]',       \n",
      "                                                                     'bidirectional_1[0][0]']     \n",
      "                                                                                                  \n",
      " dense (Dense)               (None, 64)                   16448     ['concatenate[0][0]']         \n",
      "                                                                                                  \n",
      " dense_1 (Dense)             (None, 1)                    65        ['dense[0][0]']               \n",
      "                                                                                                  \n",
      "==================================================================================================\n",
      "Total params: 110787969 (422.62 MB)\n",
      "Trainable params: 110787969 (422.62 MB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = build_model()\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "71408879",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:29:29.335905Z",
     "iopub.status.busy": "2024-08-15T05:29:29.335613Z",
     "iopub.status.idle": "2024-08-15T05:29:29.639653Z",
     "shell.execute_reply": "2024-08-15T05:29:29.638774Z"
    },
    "papermill": {
     "duration": 0.33159,
     "end_time": "2024-08-15T05:29:29.642882",
     "exception": false,
     "start_time": "2024-08-15T05:29:29.311292",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.keras.utils.plot_model(model,to_file='multi-task_model.png', show_shapes=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d9da147e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:29:29.695433Z",
     "iopub.status.busy": "2024-08-15T05:29:29.694810Z",
     "iopub.status.idle": "2024-08-15T05:29:29.705754Z",
     "shell.execute_reply": "2024-08-15T05:29:29.705060Z"
    },
    "papermill": {
     "duration": 0.038617,
     "end_time": "2024-08-15T05:29:29.707697",
     "exception": false,
     "start_time": "2024-08-15T05:29:29.669080",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class_weights = class_weight.compute_class_weight('balanced', classes=np.unique(y_train), y=y_train)\n",
    "class_weights = {i : class_weights[i] for i in range(len(class_weights))}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ccfccf7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:29:29.759695Z",
     "iopub.status.busy": "2024-08-15T05:29:29.759367Z",
     "iopub.status.idle": "2024-08-15T05:29:29.765931Z",
     "shell.execute_reply": "2024-08-15T05:29:29.765232Z"
    },
    "papermill": {
     "duration": 0.03483,
     "end_time": "2024-08-15T05:29:29.767873",
     "exception": false,
     "start_time": "2024-08-15T05:29:29.733043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import keras\n",
    "import tensorflow as tf\n",
    "my_callbacks = [\n",
    "    tf.keras.callbacks.EarlyStopping(patience=3),\n",
    "    tf.keras.callbacks.ModelCheckpoint(filepath='model.{epoch:02d}-{val_loss:.2f}.keras', save_best_only=True, monitor='val_loss', mode='min'),\n",
    "    tf.keras.callbacks.TensorBoard(log_dir='./logs')\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8bd3a779",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T05:29:29.823472Z",
     "iopub.status.busy": "2024-08-15T05:29:29.823140Z",
     "iopub.status.idle": "2024-08-15T09:14:44.929472Z",
     "shell.execute_reply": "2024-08-15T09:14:44.928542Z"
    },
    "papermill": {
     "duration": 13516.282139,
     "end_time": "2024-08-15T09:14:46.075377",
     "exception": false,
     "start_time": "2024-08-15T05:29:29.793238",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1723699880.758555      80 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1401/1401 [==============================] - 1490s 974ms/step - loss: 0.5505 - accuracy: 0.7173 - val_loss: 0.4602 - val_accuracy: 0.7839\n",
      "Epoch 2/10\n",
      "1401/1401 [==============================] - 1336s 954ms/step - loss: 0.3917 - accuracy: 0.8299 - val_loss: 0.4162 - val_accuracy: 0.8153\n",
      "Epoch 3/10\n",
      "1401/1401 [==============================] - 1336s 954ms/step - loss: 0.2700 - accuracy: 0.8943 - val_loss: 0.3734 - val_accuracy: 0.8537\n",
      "Epoch 4/10\n",
      "1401/1401 [==============================] - 1336s 954ms/step - loss: 0.1832 - accuracy: 0.9340 - val_loss: 0.3788 - val_accuracy: 0.8591\n",
      "Epoch 5/10\n",
      "1401/1401 [==============================] - 1336s 954ms/step - loss: 0.1257 - accuracy: 0.9548 - val_loss: 0.3804 - val_accuracy: 0.8751\n",
      "Epoch 6/10\n",
      "1401/1401 [==============================] - 1336s 954ms/step - loss: 0.0904 - accuracy: 0.9701 - val_loss: 0.4504 - val_accuracy: 0.8550\n",
      "Epoch 7/10\n",
      "1401/1401 [==============================] - 1336s 954ms/step - loss: 0.0685 - accuracy: 0.9771 - val_loss: 0.4689 - val_accuracy: 0.8721\n",
      "Epoch 8/10\n",
      "1401/1401 [==============================] - 1336s 954ms/step - loss: 0.0537 - accuracy: 0.9830 - val_loss: 0.5810 - val_accuracy: 0.8483\n",
      "Epoch 9/10\n",
      "1401/1401 [==============================] - 1336s 954ms/step - loss: 0.0452 - accuracy: 0.9856 - val_loss: 0.5505 - val_accuracy: 0.8707\n",
      "Epoch 10/10\n",
      "1401/1401 [==============================] - 1336s 953ms/step - loss: 0.0365 - accuracy: 0.9876 - val_loss: 0.6024 - val_accuracy: 0.8644\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tf_keras.src.callbacks.History at 0x7b0bd29116f0>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(train_dataset, epochs=10, validation_data=test_dataset, class_weight=class_weights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "388de68b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:14:48.473139Z",
     "iopub.status.busy": "2024-08-15T09:14:48.472766Z",
     "iopub.status.idle": "2024-08-15T09:18:01.820260Z",
     "shell.execute_reply": "2024-08-15T09:18:01.819420Z"
    },
    "papermill": {
     "duration": 194.528844,
     "end_time": "2024-08-15T09:18:01.822433",
     "exception": false,
     "start_time": "2024-08-15T09:14:47.293589",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "601/601 [==============================] - 193s 279ms/step\n"
     ]
    }
   ],
   "source": [
    "y_pred = model.predict(test_dataset)\n",
    "y_pred = np.round(y_pred).flatten()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f0eef010",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:18:04.216236Z",
     "iopub.status.busy": "2024-08-15T09:18:04.215865Z",
     "iopub.status.idle": "2024-08-15T09:18:04.399555Z",
     "shell.execute_reply": "2024-08-15T09:18:04.398847Z"
    },
    "papermill": {
     "duration": 1.390074,
     "end_time": "2024-08-15T09:18:04.401505",
     "exception": false,
     "start_time": "2024-08-15T09:18:03.011431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import f1_score, accuracy_score, precision_score, recall_score, confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4f2224d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:18:06.873313Z",
     "iopub.status.busy": "2024-08-15T09:18:06.872428Z",
     "iopub.status.idle": "2024-08-15T09:18:06.891474Z",
     "shell.execute_reply": "2024-08-15T09:18:06.890331Z"
    },
    "papermill": {
     "duration": 1.220271,
     "end_time": "2024-08-15T09:18:06.893712",
     "exception": false,
     "start_time": "2024-08-15T09:18:05.673441",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test F1 Score: 0.8711656441717791\n",
      "Test Accuracy: 0.8644456012493493\n",
      "Test Precision: 0.8269772684576366\n",
      "Test Recall: 0.920342881037006\n"
     ]
    }
   ],
   "source": [
    "f1 = f1_score(y_test, y_pred)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "recall = recall_score(y_test, y_pred)\n",
    "\n",
    "print(f\"Test F1 Score: {f1}\")\n",
    "print(f\"Test Accuracy: {accuracy}\")\n",
    "print(f\"Test Precision: {precision}\")\n",
    "print(f\"Test Recall: {recall}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2ee8b44a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:18:09.510691Z",
     "iopub.status.busy": "2024-08-15T09:18:09.510340Z",
     "iopub.status.idle": "2024-08-15T09:18:09.841209Z",
     "shell.execute_reply": "2024-08-15T09:18:09.840299Z"
    },
    "papermill": {
     "duration": 1.634008,
     "end_time": "2024-08-15T09:18:09.843471",
     "exception": false,
     "start_time": "2024-08-15T09:18:08.209463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Non-Contradicting', 'Contradicting'], yticklabels=['Non-Contradicting', 'Contradicting'])\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('True')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "55e28243",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:18:12.308649Z",
     "iopub.status.busy": "2024-08-15T09:18:12.308068Z",
     "iopub.status.idle": "2024-08-15T09:18:12.315327Z",
     "shell.execute_reply": "2024-08-15T09:18:12.314454Z"
    },
    "papermill": {
     "duration": 1.277143,
     "end_time": "2024-08-15T09:18:12.317468",
     "exception": false,
     "start_time": "2024-08-15T09:18:11.040325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def predict_contradiction(hypothesis, premise, model):\n",
    "    # Encode hypothesis\n",
    "    hyp_enc = tokenizer(\n",
    "        hypothesis,\n",
    "        padding='max_length',\n",
    "        truncation=True,\n",
    "        max_length=128,\n",
    "        return_tensors='tf'\n",
    "    )\n",
    "\n",
    "    # Encode premise\n",
    "    prem_enc = tokenizer(\n",
    "        premise,\n",
    "        padding='max_length',\n",
    "        truncation=True,\n",
    "        max_length=128,\n",
    "        return_tensors='tf'\n",
    "    )\n",
    "\n",
    "    # Prepare the inputs dictionary for the model\n",
    "    inputs = {\n",
    "        'input_ids_hyp': hyp_enc['input_ids'],\n",
    "        'attention_mask_hyp': hyp_enc['attention_mask'],\n",
    "        'input_ids_prem': prem_enc['input_ids'],\n",
    "        'attention_mask_prem': prem_enc['attention_mask']\n",
    "    }\n",
    "\n",
    "    # Get the prediction from the model\n",
    "    prediction = model.predict(inputs)\n",
    "\n",
    "    # Convert prediction to binary outcome\n",
    "    result = 'contradicting' if prediction[0][0] > 0.5 else 'non-contradicting'\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f8d3cdf0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:18:14.816544Z",
     "iopub.status.busy": "2024-08-15T09:18:14.815889Z",
     "iopub.status.idle": "2024-08-15T09:18:40.625850Z",
     "shell.execute_reply": "2024-08-15T09:18:40.624910Z"
    },
    "papermill": {
     "duration": 27.130527,
     "end_time": "2024-08-15T09:18:40.627742",
     "exception": false,
     "start_time": "2024-08-15T09:18:13.497215",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 26s 26s/step\n",
      "The prediction is: contradicting\n"
     ]
    }
   ],
   "source": [
    "# Test the function with example inputs\n",
    "hypothesis = \"2 .this paper is not very easy to follow .\"\n",
    "premise = \"this paper is well written and the information is very intensive whereby closely related works are well covered .\"\n",
    "\n",
    "# Get the prediction\n",
    "result = predict_contradiction(hypothesis, premise, model)\n",
    "print(f\"The prediction is: {result}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "ab2602e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:18:43.122417Z",
     "iopub.status.busy": "2024-08-15T09:18:43.122084Z",
     "iopub.status.idle": "2024-08-15T09:18:43.281432Z",
     "shell.execute_reply": "2024-08-15T09:18:43.280340Z"
    },
    "papermill": {
     "duration": 1.439969,
     "end_time": "2024-08-15T09:18:43.283682",
     "exception": false,
     "start_time": "2024-08-15T09:18:41.843713",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 82ms/step\n",
      "The prediction is: non-contradicting\n"
     ]
    }
   ],
   "source": [
    "# Test the function with example inputs\n",
    "hypothesis = \"further the paper makes several misleading claims .\"\n",
    "premise = \"the paper is rather well written but it strongly lacks precision about the proposed method .\"\n",
    "\n",
    "# Get the prediction\n",
    "result = predict_contradiction(hypothesis, premise, model)\n",
    "print(f\"The prediction is: {result}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d021fd45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:18:45.659510Z",
     "iopub.status.busy": "2024-08-15T09:18:45.658825Z",
     "iopub.status.idle": "2024-08-15T09:18:45.807394Z",
     "shell.execute_reply": "2024-08-15T09:18:45.806466Z"
    },
    "papermill": {
     "duration": 1.343788,
     "end_time": "2024-08-15T09:18:45.809422",
     "exception": false,
     "start_time": "2024-08-15T09:18:44.465634",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 81ms/step\n",
      "The prediction is: non-contradicting\n"
     ]
    }
   ],
   "source": [
    "# Test the function with example inputs\n",
    "hypothesis = \"to summarize i think this paper give some empirical support for the effectiveness of is yet the theoretical side is not ready .\"\n",
    "premise = \"this paper is decently written and the experimental results look promising .\"\n",
    "\n",
    "# Get the prediction\n",
    "result = predict_contradiction(hypothesis, premise, model)\n",
    "print(f\"The prediction is: {result}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "2ad3b610",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:18:48.330210Z",
     "iopub.status.busy": "2024-08-15T09:18:48.329528Z",
     "iopub.status.idle": "2024-08-15T09:18:48.474527Z",
     "shell.execute_reply": "2024-08-15T09:18:48.473573Z"
    },
    "papermill": {
     "duration": 1.345111,
     "end_time": "2024-08-15T09:18:48.476458",
     "exception": false,
     "start_time": "2024-08-15T09:18:47.131347",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 79ms/step\n",
      "The prediction is: non-contradicting\n"
     ]
    }
   ],
   "source": [
    "# Test the function with example inputs\n",
    "hypothesis = \"this paper reads well and the results appear sound .\"\n",
    "premise = \"2 choosing 10 % triples as positive training examples seems very ad-hoc .\"\n",
    "\n",
    "# Get the prediction\n",
    "result = predict_contradiction(hypothesis, premise, model)\n",
    "print(f\"The prediction is: {result}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "92a281e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:18:51.014066Z",
     "iopub.status.busy": "2024-08-15T09:18:51.013270Z",
     "iopub.status.idle": "2024-08-15T09:18:51.161379Z",
     "shell.execute_reply": "2024-08-15T09:18:51.160557Z"
    },
    "papermill": {
     "duration": 1.394715,
     "end_time": "2024-08-15T09:18:51.163426",
     "exception": false,
     "start_time": "2024-08-15T09:18:49.768711",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 79ms/step\n",
      "The prediction is: non-contradicting\n"
     ]
    }
   ],
   "source": [
    "# Test the function with example inputs\n",
    "hypothesis = \"some important explanation of the methods is missing .\"\n",
    "premise = \"beyond this the experimental performance of the authors ' method seems quite good on the tasks considered and at least a substantial subset of the baselines considered are recent .\"\n",
    "\n",
    "# Get the prediction\n",
    "result = predict_contradiction(hypothesis, premise, model)\n",
    "print(f\"The prediction is: {result}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "302fbc7e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:18:53.658347Z",
     "iopub.status.busy": "2024-08-15T09:18:53.657383Z",
     "iopub.status.idle": "2024-08-15T09:18:53.812570Z",
     "shell.execute_reply": "2024-08-15T09:18:53.811531Z"
    },
    "papermill": {
     "duration": 1.421933,
     "end_time": "2024-08-15T09:18:53.814396",
     "exception": false,
     "start_time": "2024-08-15T09:18:52.392463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 79ms/step\n",
      "The prediction is: non-contradicting\n"
     ]
    }
   ],
   "source": [
    "# Test the function with example inputs\n",
    "hypothesis = \"although it looks to me that leveraging drop-out in neural networks to better learn the feature-based model to help cold-start is a great idea in this paper the methodology is not clearly written to be fully convincing .\"\n",
    "premise = \"beyond this the experimental performance of the authors ' method seems quite good on the tasks considered and at least a substantial subset of the baselines considered are recent .\"\n",
    "\n",
    "# Get the prediction\n",
    "result = predict_contradiction(hypothesis, premise, model)\n",
    "print(f\"The prediction is: {result}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "30538776",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:18:56.287564Z",
     "iopub.status.busy": "2024-08-15T09:18:56.287194Z",
     "iopub.status.idle": "2024-08-15T09:18:56.435172Z",
     "shell.execute_reply": "2024-08-15T09:18:56.434257Z"
    },
    "papermill": {
     "duration": 1.436881,
     "end_time": "2024-08-15T09:18:56.437109",
     "exception": false,
     "start_time": "2024-08-15T09:18:55.000228",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 81ms/step\n",
      "The prediction is: contradicting\n"
     ]
    }
   ],
   "source": [
    "# Test the function with example inputs\n",
    "hypothesis = \"on the back of so much hope and expectation built-up in the introduction the solution put forward in the paper strikes us as a curious but a hardly useful toy .\"\n",
    "premise = \"overall evaluation the core idea is novel simple and extensive tests show that it is effective .\"\n",
    "\n",
    "# Get the prediction\n",
    "result = predict_contradiction(hypothesis, premise, model)\n",
    "print(f\"The prediction is: {result}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "ba41bcc1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:18:58.863948Z",
     "iopub.status.busy": "2024-08-15T09:18:58.863622Z",
     "iopub.status.idle": "2024-08-15T09:18:59.011188Z",
     "shell.execute_reply": "2024-08-15T09:18:59.010222Z"
    },
    "papermill": {
     "duration": 1.353538,
     "end_time": "2024-08-15T09:18:59.013202",
     "exception": false,
     "start_time": "2024-08-15T09:18:57.659664",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 80ms/step\n",
      "The prediction is: non-contradicting\n"
     ]
    }
   ],
   "source": [
    "# Test the function with example inputs\n",
    "hypothesis = \"2 not too many qualitative results are provided for each experiment \"\n",
    "premise = \"overall evaluation the core idea is novel simple and extensive tests show that it is effective .\"\n",
    "\n",
    "# Get the prediction\n",
    "result = predict_contradiction(hypothesis, premise, model)\n",
    "print(f\"The prediction is: {result}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "b1fc2d79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:19:01.608739Z",
     "iopub.status.busy": "2024-08-15T09:19:01.608036Z",
     "iopub.status.idle": "2024-08-15T09:19:01.757718Z",
     "shell.execute_reply": "2024-08-15T09:19:01.756597Z"
    },
    "papermill": {
     "duration": 1.352668,
     "end_time": "2024-08-15T09:19:01.759686",
     "exception": false,
     "start_time": "2024-08-15T09:19:00.407018",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 80ms/step\n",
      "The prediction is: non-contradicting\n"
     ]
    }
   ],
   "source": [
    "# Test the function with example inputs\n",
    "hypothesis = \" the paper is well motivated and clearly written .\"\n",
    "premise = \"the motivation of the paper would be much better tested on these tasks .\"\n",
    "\n",
    "# Get the prediction\n",
    "result = predict_contradiction(hypothesis, premise, model)\n",
    "print(f\"The prediction is: {result}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "09408bae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:19:04.297489Z",
     "iopub.status.busy": "2024-08-15T09:19:04.296652Z",
     "iopub.status.idle": "2024-08-15T09:19:04.442349Z",
     "shell.execute_reply": "2024-08-15T09:19:04.441156Z"
    },
    "papermill": {
     "duration": 1.44708,
     "end_time": "2024-08-15T09:19:04.444398",
     "exception": false,
     "start_time": "2024-08-15T09:19:02.997318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 79ms/step\n",
      "The prediction is: contradicting\n"
     ]
    }
   ],
   "source": [
    "# Test the function with example inputs\n",
    "hypothesis = \" addition are unclear .\"\n",
    "premise = \" good experimental performance on multiple sequence modeling tasks including addition multiplication and sequence mnist .\"\n",
    "\n",
    "# Get the prediction\n",
    "result = predict_contradiction(hypothesis, premise, model)\n",
    "print(f\"The prediction is: {result}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "3bd74f5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:19:06.849578Z",
     "iopub.status.busy": "2024-08-15T09:19:06.849238Z",
     "iopub.status.idle": "2024-08-15T09:19:06.997115Z",
     "shell.execute_reply": "2024-08-15T09:19:06.996159Z"
    },
    "papermill": {
     "duration": 1.344156,
     "end_time": "2024-08-15T09:19:06.999051",
     "exception": false,
     "start_time": "2024-08-15T09:19:05.654895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 80ms/step\n",
      "The prediction is: non-contradicting\n"
     ]
    }
   ],
   "source": [
    "# Test the function with example inputs\n",
    "hypothesis = \"one drawback is that the main computations are only tractable in toy domains - it would be good if they discussed how to use this with general neural model with large state spaces e.g .states obtained with an rnn .\"\n",
    "premise = \"the topic is very interesting and not studied enough the proposed method looks novel and the experimental results look promising .\"\n",
    "\n",
    "# Get the prediction\n",
    "result = predict_contradiction(hypothesis, premise, model)\n",
    "print(f\"The prediction is: {result}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "222083c5",
   "metadata": {
    "papermill": {
     "duration": 1.221194,
     "end_time": "2024-08-15T09:19:09.535528",
     "exception": false,
     "start_time": "2024-08-15T09:19:08.314334",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Saving Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "81cd8c3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T09:19:12.003369Z",
     "iopub.status.busy": "2024-08-15T09:19:12.002378Z",
     "iopub.status.idle": "2024-08-15T09:19:14.591309Z",
     "shell.execute_reply": "2024-08-15T09:19:14.590447Z"
    },
    "papermill": {
     "duration": 3.786305,
     "end_time": "2024-08-15T09:19:14.593343",
     "exception": false,
     "start_time": "2024-08-15T09:19:10.807038",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/tf_keras/src/engine/training.py:3098: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native TF-Keras format, e.g. `model.save('my_model.keras')`.\n",
      "  saving_api.save_model(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved to /kaggle/working/saved_bilstm_model.h5\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "def save_model(model, model_path='/kaggle/working/saved_bilstm_model.h5'):\n",
    "    model.save(model_path)\n",
    "    print(f\"Model saved to {model_path}\")\n",
    "\n",
    "save_model(model, '/kaggle/working/saved_bilstm_model.h5')"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 4897897,
     "sourceId": 9023700,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5544712,
     "sourceId": 9174700,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30747,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 13877.551222,
   "end_time": "2024-08-15T09:19:19.438295",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-15T05:28:01.887073",
   "version": "2.5.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "006715fc34aa47f3b63155480daaf0ed": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0b3b4f53d3754e3e8a4a91607fa0db2f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "0d3e863532744f3dbd0656ca812ba2e7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_bf19e1233ed7465c90cccdade5fa3b6a",
       "placeholder": "​",
       "style": "IPY_MODEL_fdf72568e74f4b87a28ccca0ac1a286c",
       "value": " 442M/442M [00:11&lt;00:00, 42.6MB/s]"
      }
     },
     "0eb791f659a34367a6381cfa22101b4b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_006715fc34aa47f3b63155480daaf0ed",
       "max": 442221694.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a16c11db35ba4a8e9ffbdd732f95ad3b",
       "value": 442221694.0
      }
     },
     "24c369911ce14609853a65ecf30e4844": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ca59727b4c9f42cc88c74d7c22309c6e",
        "IPY_MODEL_0eb791f659a34367a6381cfa22101b4b",
        "IPY_MODEL_0d3e863532744f3dbd0656ca812ba2e7"
       ],
       "layout": "IPY_MODEL_be4922e724ec4b4c9af1453df9e29eb4"
      }
     },
     "28bc0ee195ad4516a5e14eb511159c7e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2e555c2b05ae468d8929d8997aefd482": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_28bc0ee195ad4516a5e14eb511159c7e",
       "max": 227845.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8416b1b53174419ba8ac71aaf2bc0abd",
       "value": 227845.0
      }
     },
     "328f9e49cd2a491a9bcf10e9dab4f60b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "41f91a22036a47928d61a33ee69557c6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "451b865bc4d3468d84c18816d073ffce": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "4c7c8b58204d4a02ae728cffa0820435": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_fe800131526c4463924b2c0bf324334b",
       "placeholder": "​",
       "style": "IPY_MODEL_aebed63251aa4ba3a344e31d5614bcde",
       "value": " 228k/228k [00:00&lt;00:00, 2.81MB/s]"
      }
     },
     "5526793a3e684dd98b72dc00ad34d793": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "5da64cde298e49579b66a4382dc66a8b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6cda23326fb9401e924bfe05e9d1f94d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7ede5f4d534845c1b9b026d87574f344": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_fb59ed192457441ea29a144bdca34329",
        "IPY_MODEL_c2d8d8da60944e16aaa6445bb53aecc7",
        "IPY_MODEL_c1cfbe7e64d047a782bef932d4e5a5b9"
       ],
       "layout": "IPY_MODEL_e33d191c15ad48aabe8b42e5885e2510"
      }
     },
     "8374f0bcd1564a0aaa747d5eb7a670fa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8416b1b53174419ba8ac71aaf2bc0abd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "a03f6878c93e4fad886dc0bf68622228": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "a16c11db35ba4a8e9ffbdd732f95ad3b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "aebed63251aa4ba3a344e31d5614bcde": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "ba60585782b143c5a59bf633f67b9025": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "be4922e724ec4b4c9af1453df9e29eb4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bf19e1233ed7465c90cccdade5fa3b6a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c1cfbe7e64d047a782bef932d4e5a5b9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_5da64cde298e49579b66a4382dc66a8b",
       "placeholder": "​",
       "style": "IPY_MODEL_451b865bc4d3468d84c18816d073ffce",
       "value": " 385/385 [00:00&lt;00:00, 34.6kB/s]"
      }
     },
     "c2d8d8da60944e16aaa6445bb53aecc7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_8374f0bcd1564a0aaa747d5eb7a670fa",
       "max": 385.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_328f9e49cd2a491a9bcf10e9dab4f60b",
       "value": 385.0
      }
     },
     "ca59727b4c9f42cc88c74d7c22309c6e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_6cda23326fb9401e924bfe05e9d1f94d",
       "placeholder": "​",
       "style": "IPY_MODEL_5526793a3e684dd98b72dc00ad34d793",
       "value": "pytorch_model.bin: 100%"
      }
     },
     "d6a784d6a16e49e394be89af2bdc3f1a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dc80f3b32c954736bc2872680fbad01c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_d6a784d6a16e49e394be89af2bdc3f1a",
       "placeholder": "​",
       "style": "IPY_MODEL_0b3b4f53d3754e3e8a4a91607fa0db2f",
       "value": "vocab.txt: 100%"
      }
     },
     "e33d191c15ad48aabe8b42e5885e2510": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e984bcfd6eaa4e978e983799cdb77baa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_dc80f3b32c954736bc2872680fbad01c",
        "IPY_MODEL_2e555c2b05ae468d8929d8997aefd482",
        "IPY_MODEL_4c7c8b58204d4a02ae728cffa0820435"
       ],
       "layout": "IPY_MODEL_ba60585782b143c5a59bf633f67b9025"
      }
     },
     "fb59ed192457441ea29a144bdca34329": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_41f91a22036a47928d61a33ee69557c6",
       "placeholder": "​",
       "style": "IPY_MODEL_a03f6878c93e4fad886dc0bf68622228",
       "value": "config.json: 100%"
      }
     },
     "fdf72568e74f4b87a28ccca0ac1a286c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "fe800131526c4463924b2c0bf324334b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
