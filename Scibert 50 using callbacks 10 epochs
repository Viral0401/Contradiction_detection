{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2affb3ac",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:36.386290Z",
     "iopub.status.busy": "2024-06-12T17:25:36.385957Z",
     "iopub.status.idle": "2024-06-12T17:25:50.692515Z",
     "shell.execute_reply": "2024-06-12T17:25:50.691577Z"
    },
    "papermill": {
     "duration": 14.328038,
     "end_time": "2024-06-12T17:25:50.694942",
     "exception": false,
     "start_time": "2024-06-12T17:25:36.366904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting keras_preprocessing\r\n",
      "  Downloading Keras_Preprocessing-1.1.2-py2.py3-none-any.whl.metadata (1.9 kB)\r\n",
      "Requirement already satisfied: numpy>=1.9.1 in /opt/conda/lib/python3.10/site-packages (from keras_preprocessing) (1.26.4)\r\n",
      "Requirement already satisfied: six>=1.9.0 in /opt/conda/lib/python3.10/site-packages (from keras_preprocessing) (1.16.0)\r\n",
      "Downloading Keras_Preprocessing-1.1.2-py2.py3-none-any.whl (42 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.6/42.6 kB\u001b[0m \u001b[31m689.3 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: keras_preprocessing\r\n",
      "Successfully installed keras_preprocessing-1.1.2\r\n"
     ]
    }
   ],
   "source": [
    "!pip install keras_preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bce3472c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:50.732778Z",
     "iopub.status.busy": "2024-06-12T17:25:50.732440Z",
     "iopub.status.idle": "2024-06-12T17:25:52.740143Z",
     "shell.execute_reply": "2024-06-12T17:25:52.739375Z"
    },
    "papermill": {
     "duration": 2.028767,
     "end_time": "2024-06-12T17:25:52.742352",
     "exception": false,
     "start_time": "2024-06-12T17:25:50.713585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.utils import class_weight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a7883d86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:52.780064Z",
     "iopub.status.busy": "2024-06-12T17:25:52.779655Z",
     "iopub.status.idle": "2024-06-12T17:25:53.126584Z",
     "shell.execute_reply": "2024-06-12T17:25:53.125573Z"
    },
    "papermill": {
     "duration": 0.368784,
     "end_time": "2024-06-12T17:25:53.129119",
     "exception": false,
     "start_time": "2024-06-12T17:25:52.760335",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/viraldalal/Sdata_annotated.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "16c6985b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:53.169484Z",
     "iopub.status.busy": "2024-06-12T17:25:53.168630Z",
     "iopub.status.idle": "2024-06-12T17:25:53.193819Z",
     "shell.execute_reply": "2024-06-12T17:25:53.192889Z"
    },
    "papermill": {
     "duration": 0.047383,
     "end_time": "2024-06-12T17:25:53.196016",
     "exception": false,
     "start_time": "2024-06-12T17:25:53.148633",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>paper_id</th>\n",
       "      <th>pair_id</th>\n",
       "      <th>hypothesis</th>\n",
       "      <th>premise</th>\n",
       "      <th>aspect</th>\n",
       "      <th>s1</th>\n",
       "      <th>s2</th>\n",
       "      <th>line_pair</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>ICLR_2019_1401</td>\n",
       "      <td>3</td>\n",
       "      <td>further the paper makes several misleading cla...</td>\n",
       "      <td>the paper is rather well written but it strong...</td>\n",
       "      <td>clarity</td>\n",
       "      <td>positive</td>\n",
       "      <td>negative</td>\n",
       "      <td>(6, 2)</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>NIPS_2016_89</td>\n",
       "      <td>3</td>\n",
       "      <td>4 .i like the key idea and the speedup is very...</td>\n",
       "      <td>review scores reflect this reviewers impressio...</td>\n",
       "      <td>originality</td>\n",
       "      <td>negative</td>\n",
       "      <td>positive</td>\n",
       "      <td>(5, 20)</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>NIPS_2016_89</td>\n",
       "      <td>4</td>\n",
       "      <td>the idea to use sampling is nice but the analy...</td>\n",
       "      <td>review scores reflect this reviewers impressio...</td>\n",
       "      <td>originality</td>\n",
       "      <td>negative</td>\n",
       "      <td>positive</td>\n",
       "      <td>(5, 18)</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>NIPS_2016_89</td>\n",
       "      <td>5</td>\n",
       "      <td>to summarize i think this paper give some empi...</td>\n",
       "      <td>in my opinion the overall quality of the paper...</td>\n",
       "      <td>soundness</td>\n",
       "      <td>positive</td>\n",
       "      <td>negative</td>\n",
       "      <td>(4, 10)</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>NIPS_2016_89</td>\n",
       "      <td>5</td>\n",
       "      <td>to summarize i think this paper give some empi...</td>\n",
       "      <td>the context and relevance as well as the contr...</td>\n",
       "      <td>soundness</td>\n",
       "      <td>positive</td>\n",
       "      <td>negative</td>\n",
       "      <td>(5, 10)</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0.1  Unnamed: 0        paper_id  pair_id  \\\n",
       "0             0           0  ICLR_2019_1401        3   \n",
       "1             1           1    NIPS_2016_89        3   \n",
       "2             2           2    NIPS_2016_89        4   \n",
       "3             3           3    NIPS_2016_89        5   \n",
       "4             4           4    NIPS_2016_89        5   \n",
       "\n",
       "                                          hypothesis  \\\n",
       "0  further the paper makes several misleading cla...   \n",
       "1  4 .i like the key idea and the speedup is very...   \n",
       "2  the idea to use sampling is nice but the analy...   \n",
       "3  to summarize i think this paper give some empi...   \n",
       "4  to summarize i think this paper give some empi...   \n",
       "\n",
       "                                             premise       aspect        s1  \\\n",
       "0  the paper is rather well written but it strong...      clarity  positive   \n",
       "1  review scores reflect this reviewers impressio...  originality  negative   \n",
       "2  review scores reflect this reviewers impressio...  originality  negative   \n",
       "3  in my opinion the overall quality of the paper...    soundness  positive   \n",
       "4  the context and relevance as well as the contr...    soundness  positive   \n",
       "\n",
       "         s2 line_pair label  \n",
       "0  negative    (6, 2)     n  \n",
       "1  positive   (5, 20)     n  \n",
       "2  positive   (5, 18)     n  \n",
       "3  negative   (4, 10)     n  \n",
       "4  negative   (5, 10)     n  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b85e8f77",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:53.237447Z",
     "iopub.status.busy": "2024-06-12T17:25:53.236821Z",
     "iopub.status.idle": "2024-06-12T17:25:53.247514Z",
     "shell.execute_reply": "2024-06-12T17:25:53.246815Z"
    },
    "papermill": {
     "duration": 0.032508,
     "end_time": "2024-06-12T17:25:53.249399",
     "exception": false,
     "start_time": "2024-06-12T17:25:53.216891",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(['Unnamed: 0.1', 'Unnamed: 0', 'paper_id', 'pair_id', 'aspect', 'line_pair'], inplace = True, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0acfd6e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:53.285901Z",
     "iopub.status.busy": "2024-06-12T17:25:53.285447Z",
     "iopub.status.idle": "2024-06-12T17:25:53.320688Z",
     "shell.execute_reply": "2024-06-12T17:25:53.319860Z"
    },
    "papermill": {
     "duration": 0.055773,
     "end_time": "2024-06-12T17:25:53.322870",
     "exception": false,
     "start_time": "2024-06-12T17:25:53.267097",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/2613823751.py:1: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  df['label'] = df['label'].replace({'c': 1, 'n': 0})\n"
     ]
    }
   ],
   "source": [
    "df['label'] = df['label'].replace({'c': 1, 'n': 0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a2003b7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:53.360057Z",
     "iopub.status.busy": "2024-06-12T17:25:53.359427Z",
     "iopub.status.idle": "2024-06-12T17:25:53.369832Z",
     "shell.execute_reply": "2024-06-12T17:25:53.368855Z"
    },
    "papermill": {
     "duration": 0.030918,
     "end_time": "2024-06-12T17:25:53.371751",
     "exception": false,
     "start_time": "2024-06-12T17:25:53.340833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hypothesis</th>\n",
       "      <th>premise</th>\n",
       "      <th>s1</th>\n",
       "      <th>s2</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>further the paper makes several misleading cla...</td>\n",
       "      <td>the paper is rather well written but it strong...</td>\n",
       "      <td>positive</td>\n",
       "      <td>negative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4 .i like the key idea and the speedup is very...</td>\n",
       "      <td>review scores reflect this reviewers impressio...</td>\n",
       "      <td>negative</td>\n",
       "      <td>positive</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>the idea to use sampling is nice but the analy...</td>\n",
       "      <td>review scores reflect this reviewers impressio...</td>\n",
       "      <td>negative</td>\n",
       "      <td>positive</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>to summarize i think this paper give some empi...</td>\n",
       "      <td>in my opinion the overall quality of the paper...</td>\n",
       "      <td>positive</td>\n",
       "      <td>negative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>to summarize i think this paper give some empi...</td>\n",
       "      <td>the context and relevance as well as the contr...</td>\n",
       "      <td>positive</td>\n",
       "      <td>negative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          hypothesis  \\\n",
       "0  further the paper makes several misleading cla...   \n",
       "1  4 .i like the key idea and the speedup is very...   \n",
       "2  the idea to use sampling is nice but the analy...   \n",
       "3  to summarize i think this paper give some empi...   \n",
       "4  to summarize i think this paper give some empi...   \n",
       "\n",
       "                                             premise        s1        s2  \\\n",
       "0  the paper is rather well written but it strong...  positive  negative   \n",
       "1  review scores reflect this reviewers impressio...  negative  positive   \n",
       "2  review scores reflect this reviewers impressio...  negative  positive   \n",
       "3  in my opinion the overall quality of the paper...  positive  negative   \n",
       "4  the context and relevance as well as the contr...  positive  negative   \n",
       "\n",
       "   label  \n",
       "0      0  \n",
       "1      0  \n",
       "2      0  \n",
       "3      0  \n",
       "4      0  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3681ba8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:53.415333Z",
     "iopub.status.busy": "2024-06-12T17:25:53.414792Z",
     "iopub.status.idle": "2024-06-12T17:25:53.428443Z",
     "shell.execute_reply": "2024-06-12T17:25:53.427364Z"
    },
    "papermill": {
     "duration": 0.036234,
     "end_time": "2024-06-12T17:25:53.430718",
     "exception": false,
     "start_time": "2024-06-12T17:25:53.394484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows where 'label' is 0: 42250\n",
      "Number of rows where 'label' is 1: 5725\n"
     ]
    }
   ],
   "source": [
    "count_0 = df[df['label'] == 0].shape[0]\n",
    "\n",
    "count_1 = df[df['label'] == 1].shape[0]\n",
    "\n",
    "print(\"Number of rows where 'label' is 0:\", count_0)\n",
    "print(\"Number of rows where 'label' is 1:\", count_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "820fb88f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:53.471966Z",
     "iopub.status.busy": "2024-06-12T17:25:53.471707Z",
     "iopub.status.idle": "2024-06-12T17:25:53.477318Z",
     "shell.execute_reply": "2024-06-12T17:25:53.476467Z"
    },
    "papermill": {
     "duration": 0.028112,
     "end_time": "2024-06-12T17:25:53.479352",
     "exception": false,
     "start_time": "2024-06-12T17:25:53.451240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(47975, 5)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "108a6012",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:53.517908Z",
     "iopub.status.busy": "2024-06-12T17:25:53.517287Z",
     "iopub.status.idle": "2024-06-12T17:25:53.521699Z",
     "shell.execute_reply": "2024-06-12T17:25:53.520896Z"
    },
    "papermill": {
     "duration": 0.025785,
     "end_time": "2024-06-12T17:25:53.523750",
     "exception": false,
     "start_time": "2024-06-12T17:25:53.497965",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "# from imblearn.over_sampling import SMOTE\n",
    "# from collections import Counter\n",
    "\n",
    "\n",
    "# tfidf_vectorizer_hypothesis = TfidfVectorizer(max_features=10000)\n",
    "# X_hypothesis = tfidf_vectorizer_hypothesis.fit_transform(df['hypothesis'])\n",
    "\n",
    "# # TF-IDF vectorization for 'premise' column\n",
    "# tfidf_vectorizer_premise = TfidfVectorizer(max_features=10000)\n",
    "# X_premise = tfidf_vectorizer_premise.fit_transform(df['premise'])\n",
    "\n",
    "# y = df['label']\n",
    "\n",
    "\n",
    "# smote_hypothesis = SMOTE(random_state=42)\n",
    "# X_hypothesis_resampled, y_resampled_hypothesis = smote_hypothesis.fit_resample(X_hypothesis, y)\n",
    "\n",
    "# smote_premise = SMOTE(random_state=42)\n",
    "# X_premise_resampled, y_resampled_premise = smote_premise.fit_resample(X_premise, y)\n",
    "\n",
    "# resampled_data = pd.DataFrame({\n",
    "#     'hypothesis': [vec.toarray().squeeze() for vec in X_hypothesis_resampled],\n",
    "#     'premise': [vec.toarray().squeeze() for vec in X_premise_resampled],\n",
    "#     'label': y_resampled_hypothesis\n",
    "# })\n",
    "\n",
    "# df = resampled_data\n",
    "# df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "deb11ee3",
   "metadata": {
    "papermill": {
     "duration": 0.018231,
     "end_time": "2024-06-12T17:25:53.560150",
     "exception": false,
     "start_time": "2024-06-12T17:25:53.541919",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "df2ad0df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:53.598083Z",
     "iopub.status.busy": "2024-06-12T17:25:53.597575Z",
     "iopub.status.idle": "2024-06-12T17:25:53.605428Z",
     "shell.execute_reply": "2024-06-12T17:25:53.604544Z"
    },
    "papermill": {
     "duration": 0.02874,
     "end_time": "2024-06-12T17:25:53.607318",
     "exception": false,
     "start_time": "2024-06-12T17:25:53.578578",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df[['hypothesis', 'premise']]\n",
    "y = df['label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "89f26db0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:53.644479Z",
     "iopub.status.busy": "2024-06-12T17:25:53.644041Z",
     "iopub.status.idle": "2024-06-12T17:25:54.225412Z",
     "shell.execute_reply": "2024-06-12T17:25:54.224623Z"
    },
    "papermill": {
     "duration": 0.60248,
     "end_time": "2024-06-12T17:25:54.227775",
     "exception": false,
     "start_time": "2024-06-12T17:25:53.625295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from imblearn.over_sampling import RandomOverSampler\n",
    "ros = RandomOverSampler(random_state=42)\n",
    "X_resampled, y_resampled = ros.fit_resample(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3d6abae3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:54.266791Z",
     "iopub.status.busy": "2024-06-12T17:25:54.266297Z",
     "iopub.status.idle": "2024-06-12T17:25:54.272238Z",
     "shell.execute_reply": "2024-06-12T17:25:54.271432Z"
    },
    "papermill": {
     "duration": 0.027297,
     "end_time": "2024-06-12T17:25:54.274160",
     "exception": false,
     "start_time": "2024-06-12T17:25:54.246863",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.DataFrame({\n",
    "    'hypothesis': X_resampled['hypothesis'],\n",
    "    'premise': X_resampled['premise'],\n",
    "    'label': y_resampled\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b5563a70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:54.313255Z",
     "iopub.status.busy": "2024-06-12T17:25:54.312980Z",
     "iopub.status.idle": "2024-06-12T17:25:54.318353Z",
     "shell.execute_reply": "2024-06-12T17:25:54.317481Z"
    },
    "papermill": {
     "duration": 0.027437,
     "end_time": "2024-06-12T17:25:54.320458",
     "exception": false,
     "start_time": "2024-06-12T17:25:54.293021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(84500, 3)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "58423855",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:54.358590Z",
     "iopub.status.busy": "2024-06-12T17:25:54.357970Z",
     "iopub.status.idle": "2024-06-12T17:25:54.367348Z",
     "shell.execute_reply": "2024-06-12T17:25:54.366341Z"
    },
    "papermill": {
     "duration": 0.030537,
     "end_time": "2024-06-12T17:25:54.369480",
     "exception": false,
     "start_time": "2024-06-12T17:25:54.338943",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hypothesis</th>\n",
       "      <th>premise</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>further the paper makes several misleading cla...</td>\n",
       "      <td>the paper is rather well written but it strong...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4 .i like the key idea and the speedup is very...</td>\n",
       "      <td>review scores reflect this reviewers impressio...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>the idea to use sampling is nice but the analy...</td>\n",
       "      <td>review scores reflect this reviewers impressio...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>to summarize i think this paper give some empi...</td>\n",
       "      <td>in my opinion the overall quality of the paper...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>to summarize i think this paper give some empi...</td>\n",
       "      <td>the context and relevance as well as the contr...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          hypothesis  \\\n",
       "0  further the paper makes several misleading cla...   \n",
       "1  4 .i like the key idea and the speedup is very...   \n",
       "2  the idea to use sampling is nice but the analy...   \n",
       "3  to summarize i think this paper give some empi...   \n",
       "4  to summarize i think this paper give some empi...   \n",
       "\n",
       "                                             premise  label  \n",
       "0  the paper is rather well written but it strong...      0  \n",
       "1  review scores reflect this reviewers impressio...      0  \n",
       "2  review scores reflect this reviewers impressio...      0  \n",
       "3  in my opinion the overall quality of the paper...      0  \n",
       "4  the context and relevance as well as the contr...      0  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6c9cda46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:54.409477Z",
     "iopub.status.busy": "2024-06-12T17:25:54.408832Z",
     "iopub.status.idle": "2024-06-12T17:25:54.420391Z",
     "shell.execute_reply": "2024-06-12T17:25:54.419391Z"
    },
    "papermill": {
     "duration": 0.034059,
     "end_time": "2024-06-12T17:25:54.422369",
     "exception": false,
     "start_time": "2024-06-12T17:25:54.388310",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows where 'label' is 0: 42250\n",
      "Number of rows where 'label' is 1: 42250\n"
     ]
    }
   ],
   "source": [
    "count_0 = df[df['label'] == 0].shape[0]\n",
    "\n",
    "count_1 = df[df['label'] == 1].shape[0]\n",
    "\n",
    "print(\"Number of rows where 'label' is 0:\", count_0)\n",
    "print(\"Number of rows where 'label' is 1:\", count_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9623cc9a",
   "metadata": {
    "papermill": {
     "duration": 0.020871,
     "end_time": "2024-06-12T17:25:54.462907",
     "exception": false,
     "start_time": "2024-06-12T17:25:54.442036",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3af41789",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:54.502272Z",
     "iopub.status.busy": "2024-06-12T17:25:54.501553Z",
     "iopub.status.idle": "2024-06-12T17:25:54.505755Z",
     "shell.execute_reply": "2024-06-12T17:25:54.504916Z"
    },
    "papermill": {
     "duration": 0.025283,
     "end_time": "2024-06-12T17:25:54.507568",
     "exception": false,
     "start_time": "2024-06-12T17:25:54.482285",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5f2b766b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:54.545357Z",
     "iopub.status.busy": "2024-06-12T17:25:54.545113Z",
     "iopub.status.idle": "2024-06-12T17:25:54.551984Z",
     "shell.execute_reply": "2024-06-12T17:25:54.551230Z"
    },
    "papermill": {
     "duration": 0.027768,
     "end_time": "2024-06-12T17:25:54.553817",
     "exception": false,
     "start_time": "2024-06-12T17:25:54.526049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df[['hypothesis','premise']]\n",
    "y = df['label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "611b81fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:54.592221Z",
     "iopub.status.busy": "2024-06-12T17:25:54.591656Z",
     "iopub.status.idle": "2024-06-12T17:25:54.607033Z",
     "shell.execute_reply": "2024-06-12T17:25:54.606205Z"
    },
    "papermill": {
     "duration": 0.036678,
     "end_time": "2024-06-12T17:25:54.608937",
     "exception": false,
     "start_time": "2024-06-12T17:25:54.572259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "90fa17db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:25:54.684656Z",
     "iopub.status.busy": "2024-06-12T17:25:54.684100Z",
     "iopub.status.idle": "2024-06-12T17:26:12.462294Z",
     "shell.execute_reply": "2024-06-12T17:26:12.461518Z"
    },
    "papermill": {
     "duration": 17.799972,
     "end_time": "2024-06-12T17:26:12.464646",
     "exception": false,
     "start_time": "2024-06-12T17:25:54.664674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-06-12 17:26:02.228180: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-06-12 17:26:02.228283: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-06-12 17:26:02.379257: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "from transformers import AutoTokenizer, TFAutoModel\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5d4b45ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:26:12.504068Z",
     "iopub.status.busy": "2024-06-12T17:26:12.503569Z",
     "iopub.status.idle": "2024-06-12T17:26:21.866275Z",
     "shell.execute_reply": "2024-06-12T17:26:21.865499Z"
    },
    "papermill": {
     "duration": 9.384251,
     "end_time": "2024-06-12T17:26:21.868288",
     "exception": false,
     "start_time": "2024-06-12T17:26:12.484037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cda98527c0484b19bf65cdfbdd935b9a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/385 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9200d5ae584e4d4694498068cab9a9f1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.txt:   0%|          | 0.00/228k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5f9c88924b72451c9d45a5d2237308b7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "pytorch_model.bin:   0%|          | 0.00/442M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torch/_utils.py:831: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()\n",
      "  return self.fget.__get__(instance, owner)()\n",
      "Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFBertModel: ['cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.bias', 'cls.predictions.transform.dense.bias', 'cls.seq_relationship.bias', 'cls.seq_relationship.weight', 'cls.predictions.decoder.bias']\n",
      "- This IS expected if you are initializing TFBertModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n",
      "- This IS NOT expected if you are initializing TFBertModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\n",
      "All the weights of TFBertModel were initialized from the PyTorch model.\n",
      "If your task is similar to the task the model of the checkpoint was trained on, you can already use TFBertModel for predictions without further training.\n"
     ]
    }
   ],
   "source": [
    "tokenizer = AutoTokenizer.from_pretrained(\"allenai/scibert_scivocab_uncased\")\n",
    "scibert_model = TFAutoModel.from_pretrained(\"allenai/scibert_scivocab_uncased\", from_pt=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6bf7c668",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:26:21.909375Z",
     "iopub.status.busy": "2024-06-12T17:26:21.909071Z",
     "iopub.status.idle": "2024-06-12T17:26:21.913749Z",
     "shell.execute_reply": "2024-06-12T17:26:21.912891Z"
    },
    "papermill": {
     "duration": 0.02711,
     "end_time": "2024-06-12T17:26:21.915581",
     "exception": false,
     "start_time": "2024-06-12T17:26:21.888471",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "MAX_LEN = 128\n",
    "def encode_texts(texts):\n",
    "    return tokenizer(\n",
    "        texts.tolist(), padding=True, truncation=True, max_length=MAX_LEN, return_tensors='tf'\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "407c5558",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:26:21.956823Z",
     "iopub.status.busy": "2024-06-12T17:26:21.956496Z",
     "iopub.status.idle": "2024-06-12T17:26:40.337869Z",
     "shell.execute_reply": "2024-06-12T17:26:40.337070Z"
    },
    "papermill": {
     "duration": 18.404984,
     "end_time": "2024-06-12T17:26:40.340242",
     "exception": false,
     "start_time": "2024-06-12T17:26:21.935258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_hypotheses_enc = encode_texts(X_train['hypothesis'])\n",
    "train_premises_enc = encode_texts(X_train['premise'])\n",
    "test_hypotheses_enc = encode_texts(X_test['hypothesis'])\n",
    "test_premises_enc = encode_texts(X_test['premise'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "44ac88a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:26:40.382093Z",
     "iopub.status.busy": "2024-06-12T17:26:40.381812Z",
     "iopub.status.idle": "2024-06-12T17:26:40.403975Z",
     "shell.execute_reply": "2024-06-12T17:26:40.403280Z"
    },
    "papermill": {
     "duration": 0.045102,
     "end_time": "2024-06-12T17:26:40.405846",
     "exception": false,
     "start_time": "2024-06-12T17:26:40.360744",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_dataset = tf.data.Dataset.from_tensor_slices(\n",
    "    ((train_hypotheses_enc['input_ids'], train_hypotheses_enc['attention_mask'],\n",
    "      train_premises_enc['input_ids'], train_premises_enc['attention_mask']),\n",
    "     y_train)\n",
    ").shuffle(len(X_train)).batch(16)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices(\n",
    "    ((test_hypotheses_enc['input_ids'], test_hypotheses_enc['attention_mask'],\n",
    "      test_premises_enc['input_ids'], test_premises_enc['attention_mask']),\n",
    "     y_test)\n",
    ").batch(16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "cddb5479",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:26:40.448833Z",
     "iopub.status.busy": "2024-06-12T17:26:40.448478Z",
     "iopub.status.idle": "2024-06-12T17:26:40.586288Z",
     "shell.execute_reply": "2024-06-12T17:26:40.585551Z"
    },
    "papermill": {
     "duration": 0.162436,
     "end_time": "2024-06-12T17:26:40.588234",
     "exception": false,
     "start_time": "2024-06-12T17:26:40.425798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class AttentionLayer(tf.keras.layers.Layer):\n",
    "    def __init__(self, **kwargs):\n",
    "        super(AttentionLayer, self).__init__(**kwargs)\n",
    "\n",
    "    def build(self, input_shape):\n",
    "        self.W = self.add_weight(name=\"att_weight\", shape=(input_shape[-1],), initializer=\"random_normal\")\n",
    "        super(AttentionLayer, self).build(input_shape)\n",
    "\n",
    "    def call(self, x):\n",
    "        e = tf.keras.backend.tanh(tf.tensordot(x, self.W, axes=(2, 0)))\n",
    "        a = tf.keras.backend.softmax(e)\n",
    "        output = x * tf.expand_dims(a, -1)\n",
    "        return tf.keras.backend.sum(output, axis=1)\n",
    "\n",
    "def build_model():\n",
    "    input_ids_hyp = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids_hyp')\n",
    "    attention_mask_hyp = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask_hyp')\n",
    "    input_ids_prem = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids_prem')\n",
    "    attention_mask_prem = tf.keras.Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask_prem')\n",
    "\n",
    "    scibert_output_hyp = scibert_model(input_ids=input_ids_hyp, attention_mask=attention_mask_hyp)[0]\n",
    "    scibert_output_prem = scibert_model(input_ids=input_ids_prem, attention_mask=attention_mask_prem)[0]\n",
    "\n",
    "    lstm_hyp = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64, return_sequences=True))(scibert_output_hyp)\n",
    "    lstm_prem = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64, return_sequences=True))(scibert_output_prem)\n",
    "\n",
    "    att_hyp = AttentionLayer()(lstm_hyp)\n",
    "    att_prem = AttentionLayer()(lstm_prem)\n",
    "\n",
    "    concatenated = tf.keras.layers.Concatenate()([att_hyp, att_prem])\n",
    "\n",
    "    dense = tf.keras.layers.Dense(64, activation='relu')(concatenated)\n",
    "    output = tf.keras.layers.Dense(1, activation='sigmoid')(dense)\n",
    "\n",
    "    model = tf.keras.Model(inputs=[input_ids_hyp, attention_mask_hyp, input_ids_prem, attention_mask_prem], outputs=output)\n",
    "\n",
    "    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-5),\n",
    "                  loss='binary_crossentropy',\n",
    "                  metrics=['accuracy'])\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2bb0c2ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:26:40.629073Z",
     "iopub.status.busy": "2024-06-12T17:26:40.628814Z",
     "iopub.status.idle": "2024-06-12T17:27:09.120839Z",
     "shell.execute_reply": "2024-06-12T17:27:09.119826Z"
    },
    "papermill": {
     "duration": 28.514652,
     "end_time": "2024-06-12T17:27:09.122749",
     "exception": false,
     "start_time": "2024-06-12T17:26:40.608097",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "__________________________________________________________________________________________________\n",
      " Layer (type)                Output Shape                 Param #   Connected to                  \n",
      "==================================================================================================\n",
      " input_ids_hyp (InputLayer)  [(None, 128)]                0         []                            \n",
      "                                                                                                  \n",
      " attention_mask_hyp (InputL  [(None, 128)]                0         []                            \n",
      " ayer)                                                                                            \n",
      "                                                                                                  \n",
      " input_ids_prem (InputLayer  [(None, 128)]                0         []                            \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " attention_mask_prem (Input  [(None, 128)]                0         []                            \n",
      " Layer)                                                                                           \n",
      "                                                                                                  \n",
      " tf_bert_model (TFBertModel  TFBaseModelOutputWithPooli   1099184   ['input_ids_hyp[0][0]',       \n",
      " )                           ngAndCrossAttentions(last_   64         'attention_mask_hyp[0][0]',  \n",
      "                             hidden_state=(None, 128, 7              'input_ids_prem[0][0]',      \n",
      "                             68),                                    'attention_mask_prem[0][0]'] \n",
      "                              pooler_output=(None, 768)                                           \n",
      "                             , past_key_values=None, hi                                           \n",
      "                             dden_states=None, attentio                                           \n",
      "                             ns=None, cross_attentions=                                           \n",
      "                             None)                                                                \n",
      "                                                                                                  \n",
      " bidirectional (Bidirection  (None, 128, 128)             426496    ['tf_bert_model[0][0]']       \n",
      " al)                                                                                              \n",
      "                                                                                                  \n",
      " bidirectional_1 (Bidirecti  (None, 128, 128)             426496    ['tf_bert_model[1][0]']       \n",
      " onal)                                                                                            \n",
      "                                                                                                  \n",
      " attention_layer (Attention  (None, 128)                  128       ['bidirectional[0][0]']       \n",
      " Layer)                                                                                           \n",
      "                                                                                                  \n",
      " attention_layer_1 (Attenti  (None, 128)                  128       ['bidirectional_1[0][0]']     \n",
      " onLayer)                                                                                         \n",
      "                                                                                                  \n",
      " concatenate (Concatenate)   (None, 256)                  0         ['attention_layer[0][0]',     \n",
      "                                                                     'attention_layer_1[0][0]']   \n",
      "                                                                                                  \n",
      " dense (Dense)               (None, 64)                   16448     ['concatenate[0][0]']         \n",
      "                                                                                                  \n",
      " dense_1 (Dense)             (None, 1)                    65        ['dense[0][0]']               \n",
      "                                                                                                  \n",
      "==================================================================================================\n",
      "Total params: 110788225 (422.62 MB)\n",
      "Trainable params: 110788225 (422.62 MB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = build_model()\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d7da3b60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:27:09.170900Z",
     "iopub.status.busy": "2024-06-12T17:27:09.170391Z",
     "iopub.status.idle": "2024-06-12T17:27:09.577533Z",
     "shell.execute_reply": "2024-06-12T17:27:09.576634Z"
    },
    "papermill": {
     "duration": 0.434471,
     "end_time": "2024-06-12T17:27:09.580868",
     "exception": false,
     "start_time": "2024-06-12T17:27:09.146397",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.keras.utils.plot_model(model,to_file='multi-task_model.png', show_shapes=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "47cac1ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:27:09.634810Z",
     "iopub.status.busy": "2024-06-12T17:27:09.634494Z",
     "iopub.status.idle": "2024-06-12T17:27:09.653605Z",
     "shell.execute_reply": "2024-06-12T17:27:09.652911Z"
    },
    "papermill": {
     "duration": 0.047249,
     "end_time": "2024-06-12T17:27:09.655407",
     "exception": false,
     "start_time": "2024-06-12T17:27:09.608158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class_weights = class_weight.compute_class_weight('balanced', classes=np.unique(y_train), y=y_train)\n",
    "class_weights = {i : class_weights[i] for i in range(len(class_weights))}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "204855a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:27:09.708076Z",
     "iopub.status.busy": "2024-06-12T17:27:09.707800Z",
     "iopub.status.idle": "2024-06-12T17:27:09.714345Z",
     "shell.execute_reply": "2024-06-12T17:27:09.713678Z"
    },
    "papermill": {
     "duration": 0.034401,
     "end_time": "2024-06-12T17:27:09.716143",
     "exception": false,
     "start_time": "2024-06-12T17:27:09.681742",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import keras\n",
    "import tensorflow as tf\n",
    "my_callbacks = [\n",
    "    tf.keras.callbacks.EarlyStopping(patience=3),\n",
    "    tf.keras.callbacks.ModelCheckpoint(filepath='model.{epoch:02d}-{val_loss:.2f}.keras', save_best_only=True, monitor='val_loss', mode='min'),\n",
    "    tf.keras.callbacks.TensorBoard(log_dir='./logs')\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "5b0c72a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T17:27:09.768002Z",
     "iopub.status.busy": "2024-06-12T17:27:09.767736Z",
     "iopub.status.idle": "2024-06-13T01:17:38.599254Z",
     "shell.execute_reply": "2024-06-13T01:17:38.598409Z"
    },
    "papermill": {
     "duration": 28231.559371,
     "end_time": "2024-06-13T01:17:41.300686",
     "exception": false,
     "start_time": "2024-06-12T17:27:09.741315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1718213340.187518      80 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3697/3697 [==============================] - ETA: 0s - loss: 0.4330 - accuracy: 0.7988"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/transformers/generation/tf_utils.py:465: UserWarning: `seed_generator` is deprecated and will be removed in a future version.\n",
      "  warnings.warn(\"`seed_generator` is deprecated and will be removed in a future version.\", UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3697/3697 [==============================] - 3664s 957ms/step - loss: 0.4330 - accuracy: 0.7988 - val_loss: 0.2820 - val_accuracy: 0.8871\n",
      "Epoch 2/50\n",
      "3697/3697 [==============================] - 3512s 950ms/step - loss: 0.2177 - accuracy: 0.9177 - val_loss: 0.1970 - val_accuracy: 0.9303\n",
      "Epoch 3/50\n",
      "3697/3697 [==============================] - 3513s 950ms/step - loss: 0.1262 - accuracy: 0.9567 - val_loss: 0.1488 - val_accuracy: 0.9519\n",
      "Epoch 4/50\n",
      "3697/3697 [==============================] - 3508s 949ms/step - loss: 0.0870 - accuracy: 0.9718 - val_loss: 0.1774 - val_accuracy: 0.9434\n",
      "Epoch 5/50\n",
      "3697/3697 [==============================] - 3512s 950ms/step - loss: 0.0642 - accuracy: 0.9799 - val_loss: 0.1473 - val_accuracy: 0.9579\n",
      "Epoch 6/50\n",
      "3697/3697 [==============================] - 3507s 949ms/step - loss: 0.0505 - accuracy: 0.9843 - val_loss: 0.2062 - val_accuracy: 0.9430\n",
      "Epoch 7/50\n",
      "3697/3697 [==============================] - 3506s 948ms/step - loss: 0.0405 - accuracy: 0.9878 - val_loss: 0.1790 - val_accuracy: 0.9528\n",
      "Epoch 8/50\n",
      "3697/3697 [==============================] - 3506s 948ms/step - loss: 0.0344 - accuracy: 0.9893 - val_loss: 0.2193 - val_accuracy: 0.9455\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tf_keras.src.callbacks.History at 0x7ba223253400>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(train_dataset, epochs=50, validation_data=test_dataset, class_weight=class_weights, callbacks=my_callbacks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "623a15d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T01:17:46.423092Z",
     "iopub.status.busy": "2024-06-13T01:17:46.422746Z",
     "iopub.status.idle": "2024-06-13T01:25:35.865887Z",
     "shell.execute_reply": "2024-06-13T01:25:35.864905Z"
    },
    "papermill": {
     "duration": 472.080252,
     "end_time": "2024-06-13T01:25:35.868236",
     "exception": false,
     "start_time": "2024-06-13T01:17:43.787984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1585/1585 [==============================] - 469s 278ms/step\n"
     ]
    }
   ],
   "source": [
    "y_pred = model.predict(test_dataset)\n",
    "y_pred = np.round(y_pred).flatten()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "0ff34b1f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T01:25:41.280354Z",
     "iopub.status.busy": "2024-06-13T01:25:41.279936Z",
     "iopub.status.idle": "2024-06-13T01:25:41.521293Z",
     "shell.execute_reply": "2024-06-13T01:25:41.520500Z"
    },
    "papermill": {
     "duration": 2.868126,
     "end_time": "2024-06-13T01:25:41.523388",
     "exception": false,
     "start_time": "2024-06-13T01:25:38.655262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import f1_score, accuracy_score, precision_score, recall_score, confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "7e33ac14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T01:25:46.905824Z",
     "iopub.status.busy": "2024-06-13T01:25:46.905457Z",
     "iopub.status.idle": "2024-06-13T01:25:46.928697Z",
     "shell.execute_reply": "2024-06-13T01:25:46.927582Z"
    },
    "papermill": {
     "duration": 2.656643,
     "end_time": "2024-06-13T01:25:46.930678",
     "exception": false,
     "start_time": "2024-06-13T01:25:44.274035",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test F1 Score: 0.9480763450556057\n",
      "Test Accuracy: 0.945483234714004\n",
      "Test Precision: 0.9048985153840637\n",
      "Test Recall: 0.995581156790026\n"
     ]
    }
   ],
   "source": [
    "f1 = f1_score(y_test, y_pred)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "recall = recall_score(y_test, y_pred)\n",
    "\n",
    "print(f\"Test F1 Score: {f1}\")\n",
    "print(f\"Test Accuracy: {accuracy}\")\n",
    "print(f\"Test Precision: {precision}\")\n",
    "print(f\"Test Recall: {recall}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "04f66300",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T01:25:52.471944Z",
     "iopub.status.busy": "2024-06-13T01:25:52.471617Z",
     "iopub.status.idle": "2024-06-13T01:25:52.834316Z",
     "shell.execute_reply": "2024-06-13T01:25:52.833305Z"
    },
    "papermill": {
     "duration": 3.155235,
     "end_time": "2024-06-13T01:25:52.836645",
     "exception": false,
     "start_time": "2024-06-13T01:25:49.681410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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woULaRp/5MgRubi4KCQkxKE9ICBAPj4+OnLkiEN7/vz5U83h6+urc+fO3WPEqb300kuqWrWqOnTooNy5c6tFixb65ptv7ph03oizaNGiqfqKFy+uf/75RxcvXnRo//e5+Pr6StJdnUv9+vWVPXt2ff3115o3b56eeOKJVO/lDSkpKRo/frwKFy4sNzc35cyZU7ly5dKuXbt0/vz5NB8zb968d3Xjz4cffig/Pz9FRkZq0qRJ8vf3T/NrAcAKJJpABuXl5aXAwEDt2bPnrl7375txbidTpky3bDcM456PcWP94A0eHh5at26dfv75Z7366qvatWuXXnrpJT377LOpxt6P+zmXG9zc3NSsWTPNmTNHixYtum01U5Lee+899e7dW9WrV9cXX3yhFStWaNWqVSpZsmSaK7fS9ffnbuzcuVOxsbGSpN27d9/VawHACiSaQAbWsGFD/fXXX9q0adN/jg0KClJKSoqio6Md2k+dOqW4uDj7HeTpwdfX1+EO7Rv+XTWVJBcXF9WuXVvjxo3TH3/8oZEjRyoiIkJr1qy55dw34oyKikrVt3//fuXMmVPZsmW7vxO4jZYtW2rnzp26cOHCLW+guuG7775TrVq19Omnn6pFixaqU6eOQkNDU70naU360+LixYtq27atSpQooU6dOmnMmDHatm1bus0PAGYg0QQysDfffFPZsmVThw4ddOrUqVT9f/31lyZOnCjp+qVfSanuDB83bpwkqUGDBukWV6FChXT+/Hnt2rXL3nby5EktWrTIYdzZs2dTvfbGxuX/3nLphjx58qhs2bKaM2eOQ+K2Z88erVy50n6eZqhVq5beeecdTZkyRQEBAbcdlylTplTV0m+//VZ///23Q9uNhPhWSfnd6t+/v44ePao5c+Zo3LhxKlCggMLDw2/7PgJARsCG7UAGVqhQIc2fP18vvfSSihcv7vDNQBs3btS3336rNm3aSJIef/xxhYeHa+bMmYqLi1ONGjW0detWzZkzR02aNLnt1jn3okWLFurfv7+aNm2q7t2769KlS5o+fbqKFCnicDPMiBEjtG7dOjVo0EBBQUGKjY3VtGnT9Nhjj+npp5++7fwffPCB6tWrp8qVK6t9+/a6fPmyJk+eLG9vbw0bNizdzuPfXFxc9Pbbb//nuIYNG2rEiBFq27atqlSpot27d2vevHkqWLCgw7hChQrJ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fKBhw4Zp5syZ6Xo+GSLRDAkJ0TfffJOq/euvv1bhwoUtiAgAADiTjLJGc+PGjWrcuLEaNGigAgUK6Pnnn1edOnW0detWSdermRMmTNDbb7+txo0bq0yZMpo7d65OnDihxYsXS5L27dun5cuX65NPPlGlSpX09NNPa/Lkyfrqq6904sQJSdK8efN09epVffbZZypZsqRatGih7t27a9y4cen6vmaINZrDhw/XSy+9pHXr1tnXaG7YsEGrV6++ZQIKAACQnsy8ZycxMVGJiYkObW5ubnJzc0s1tkqVKpo5c6b+/PNPFSlSRL///rvWr19vTwAPHTqkmJgYhYaG2l/j7e2tSpUqadOmTWrRooU2bdokHx8fVaxY0T4mNDRULi4u2rJli5o2bapNmzapevXqypIli31MWFiYRo8erXPnzsnX1zddzj1DVDSbN2+uLVu2KEeOHFq8eLEWL16snDlzauvWrWratKnV4QEAANyzUaNGydvb2+ExatSoW44dMGCAWrRooWLFisnV1VXlypVTz5491apVK0lSTEyMJCl37twOr8udO7e9LyYmRv7+/g79mTNnlp+fn8OYW81x8zHSQ4aoaEpShQoVNG/ePKvDAAAATsjMbYgGDhyo3r17O7TdqpopSd98843mzZun+fPnq2TJkoqMjFTPnj0VGBio8PBw02I0i6WJpouLy3/+wdpsNl27du0BRQQAAJC+bneZ/Fb69etnr2pKUunSpXXkyBGNGjVK4eHhCggIkCSdOnVKefLksb/u1KlTKlu2rCQpICBAsbGxDvNeu3ZNZ8+etb8+ICBAp06dchhz4/mNMenB0kRz0aJFt+3btGmTJk2apJSUlAcYEQAAcEYZZV/1S5cuycXFcWVjpkyZ7PlQcHCwAgICtHr1antiGR8fry1btqhLly6SpMqVKysuLk7bt29XhQoVJEkRERFKSUlRpUqV7GMGDRqkpKQkubq6SpJWrVqlokWLptv6TMniRLNx48ap2qKiojRgwAAtWbJErVq10ogRIyyIDAAA4MF77rnnNHLkSOXPn18lS5bUzp07NW7cOLVr107S9Su9PXv21LvvvqvChQsrODhYgwcPVmBgoJo0aSJJKl68uOrWrauOHTtqxowZSkpKUrdu3dSiRQsFBgZKklq2bKnhw4erffv26t+/v/bs2aOJEydq/Pjx6Xo+GWaN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pUuXVkpKin755Rf7pfOb3aioJicn29tKlCghNzc3HT169LaV0OLFi+uHH35waNu8efN/nyQAIBVuBgJgulatWilnzpxq3Lixfv31Vx06dEhr165V9+7ddfz4cUlSjx499P7772vx4sXav3+/Xn/99TvugVmgQAGFh4erXbt2Wrx4sX3Ob775RpIUFBQkm82mpUuX6vTp00pISFD27NnVt29f9erVS3PmzNFff/2lHTt2aPLkyZozZ44kqXPnzoqOjla/fv0UFRWl+fPna/bs2Wa/RQDwSCLRBGC6rFmzat26dcqfP7+aNWum4sWLq3379rpy5Yq9wtmnTx+9+uqrCg8PV+XKlZU9e3Y1bdr0jvNOnz5dzz//vF5//XUVK1ZMHTt21MWLFyVJefPm1fDhwzVgwADlzp1b3bp1kyS98847Gjx4sEaNGqXixYurbt26+vHHHxUcHCxJyp8/vxYsWKDFixfr8ccf14wZM/Tee++Z+O4AwKPLZtxupT0AAABwH6hoAgAAwBQkmgAAADAFiSYAAABMQaIJAAAAU5BoAgAAwBQkmgAAADAFiSYAAABMQaIJAAAAU5BoAgAAwBQkmgAAADAFiSYAAABM8X9jcUemEG3VTAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Non-Contradicting', 'Contradicting'], yticklabels=['Non-Contradicting', 'Contradicting'])\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('True')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80e55d6e",
   "metadata": {
    "papermill": {
     "duration": 2.776206,
     "end_time": "2024-06-13T01:25:58.205249",
     "exception": false,
     "start_time": "2024-06-13T01:25:55.429043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5e289487",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T01:26:03.654390Z",
     "iopub.status.busy": "2024-06-13T01:26:03.653571Z",
     "iopub.status.idle": "2024-06-13T01:26:30.085216Z",
     "shell.execute_reply": "2024-06-13T01:26:30.084240Z"
    },
    "papermill": {
     "duration": 29.04522,
     "end_time": "2024-06-13T01:26:30.087141",
     "exception": false,
     "start_time": "2024-06-13T01:26:01.041921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 26s 26s/step\n",
      "The prediction is: contradicting\n"
     ]
    }
   ],
   "source": [
    "def predict_contradiction(hypothesis, premise, model):\n",
    "    # Encode hypothesis\n",
    "    hyp_enc = tokenizer(\n",
    "        hypothesis,\n",
    "        padding='max_length',\n",
    "        truncation=True,\n",
    "        max_length=128,\n",
    "        return_tensors='tf'\n",
    "    )\n",
    "\n",
    "    # Encode premise\n",
    "    prem_enc = tokenizer(\n",
    "        premise,\n",
    "        padding='max_length',\n",
    "        truncation=True,\n",
    "        max_length=128,\n",
    "        return_tensors='tf'\n",
    "    )\n",
    "\n",
    "    # Prepare the inputs dictionary for the model\n",
    "    inputs = {\n",
    "        'input_ids_hyp': hyp_enc['input_ids'],\n",
    "        'attention_mask_hyp': hyp_enc['attention_mask'],\n",
    "        'input_ids_prem': prem_enc['input_ids'],\n",
    "        'attention_mask_prem': prem_enc['attention_mask']\n",
    "    }\n",
    "\n",
    "    # Get the prediction from the model\n",
    "    prediction = model.predict(inputs)\n",
    "\n",
    "    # Convert prediction to binary outcome\n",
    "    result = 'contradicting' if prediction[0][0] > 0.5 else 'non-contradicting'\n",
    "    return result\n",
    "\n",
    "# Test the function with example inputs\n",
    "hypothesis = \"2 .this paper is not very easy to follow .\"\n",
    "premise = \"this paper is well written and the information is very intensive whereby closely related works are well covered .\"\n",
    "\n",
    "# Get the prediction\n",
    "result = predict_contradiction(hypothesis, premise, model)\n",
    "print(f\"The prediction is: {result}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "154b887d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T01:26:35.532110Z",
     "iopub.status.busy": "2024-06-13T01:26:35.531752Z",
     "iopub.status.idle": "2024-06-13T01:26:35.684265Z",
     "shell.execute_reply": "2024-06-13T01:26:35.683290Z"
    },
    "papermill": {
     "duration": 2.788155,
     "end_time": "2024-06-13T01:26:35.686184",
     "exception": false,
     "start_time": "2024-06-13T01:26:32.898029",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 81ms/step\n",
      "The prediction is: non-contradicting\n"
     ]
    }
   ],
   "source": [
    "def predict_contradiction(hypothesis, premise, model):\n",
    "    # Encode hypothesis\n",
    "    hyp_enc = tokenizer(\n",
    "        hypothesis,\n",
    "        padding='max_length',\n",
    "        truncation=True,\n",
    "        max_length=128,\n",
    "        return_tensors='tf'\n",
    "    )\n",
    "\n",
    "    # Encode premise\n",
    "    prem_enc = tokenizer(\n",
    "        premise,\n",
    "        padding='max_length',\n",
    "        truncation=True,\n",
    "        max_length=128,\n",
    "        return_tensors='tf'\n",
    "    )\n",
    "\n",
    "    # Prepare the inputs dictionary for the model\n",
    "    inputs = {\n",
    "        'input_ids_hyp': hyp_enc['input_ids'],\n",
    "        'attention_mask_hyp': hyp_enc['attention_mask'],\n",
    "        'input_ids_prem': prem_enc['input_ids'],\n",
    "        'attention_mask_prem': prem_enc['attention_mask']\n",
    "    }\n",
    "\n",
    "    # Get the prediction from the model\n",
    "    prediction = model.predict(inputs)\n",
    "\n",
    "    # Convert prediction to binary outcome\n",
    "    result = 'contradicting' if prediction[0][0] > 0.5 else 'non-contradicting'\n",
    "    return result\n",
    "\n",
    "# Test the function with example inputs\n",
    "hypothesis = \"further the paper makes several misleading claims .\"\n",
    "premise = \"the paper is rather well written but it strongly lacks precision about the proposed method .\"\n",
    "\n",
    "# Get the prediction\n",
    "result = predict_contradiction(hypothesis, premise, model)\n",
    "print(f\"The prediction is: {result}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "bc22fd0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T01:26:41.217681Z",
     "iopub.status.busy": "2024-06-13T01:26:41.216921Z",
     "iopub.status.idle": "2024-06-13T01:26:44.235791Z",
     "shell.execute_reply": "2024-06-13T01:26:44.234566Z"
    },
    "papermill": {
     "duration": 5.790675,
     "end_time": "2024-06-13T01:26:44.238444",
     "exception": false,
     "start_time": "2024-06-13T01:26:38.447769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n",
      "  warnings.warn(\n",
      "Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFBertModel: ['cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.bias', 'cls.predictions.transform.dense.bias', 'cls.seq_relationship.bias', 'cls.seq_relationship.weight', 'cls.predictions.decoder.bias']\n",
      "- This IS expected if you are initializing TFBertModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n",
      "- This IS NOT expected if you are initializing TFBertModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\n",
      "All the weights of TFBertModel were initialized from the PyTorch model.\n",
      "If your task is similar to the task the model of the checkpoint was trained on, you can already use TFBertModel for predictions without further training.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model weights saved to model_weights.pkl\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "from transformers import TFAutoModel, AutoTokenizer\n",
    "\n",
    "# Initialize the tokenizer and model\n",
    "tokenizer = AutoTokenizer.from_pretrained(\"allenai/scibert_scivocab_uncased\")\n",
    "scibert_model = TFAutoModel.from_pretrained(\"allenai/scibert_scivocab_uncased\", from_pt=True)\n",
    "\n",
    "\n",
    "# Function to save the model weights to a pickle file\n",
    "def save_model_weights_to_pickle(model, file_path):\n",
    "    # Get the model weights\n",
    "    model_weights = model.get_weights()\n",
    "    \n",
    "    # Save the model weights to a pickle file\n",
    "    with open(file_path, 'wb') as file:\n",
    "        pickle.dump(model_weights, file)\n",
    "    print(f\"Model weights saved to {file_path}\")\n",
    "\n",
    "# File path to save the model weights\n",
    "weights_file_path = 'model_weights.pkl'\n",
    "\n",
    "# Save the model weights\n",
    "save_model_weights_to_pickle(scibert_model, weights_file_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c292fb4e",
   "metadata": {
    "papermill": {
     "duration": 2.769853,
     "end_time": "2024-06-13T01:26:49.626862",
     "exception": false,
     "start_time": "2024-06-13T01:26:46.857009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 5190813,
     "sourceId": 8663191,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5200340,
     "sourceId": 8675894,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30733,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 28881.973961,
   "end_time": "2024-06-13T01:26:55.298191",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-12T17:25:33.324230",
   "version": "2.5.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "003234a6102446a0bb36885909476784": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0058c4cee1cf493da617bb352537eb5c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_98b95fa32c934a8890fc89396d6107c2",
       "placeholder": "​",
       "style": "IPY_MODEL_c8b4c231bc854ff5b1c9a43d46d42622",
       "value": " 228k/228k [00:00&lt;00:00, 5.15MB/s]"
      }
     },
     "043706f11d234f3cae5ee52c295b7404": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "0a5252e0175c42ed91ac89cac49a1956": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "18d66598c2e2446daf7d2644c3d81ccb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "24b41169177d483ca76b6f9035db3f6a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "28c140f66abc4feba9ddbe8a603a8457": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "2bf03ad9e29c4abd8c04d20eb9c04683": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_571c98be78274300ae0d347cdfe8d46e",
       "placeholder": "​",
       "style": "IPY_MODEL_850dee6150454007ad53fd6cbe694eae",
       "value": " 385/385 [00:00&lt;00:00, 33.6kB/s]"
      }
     },
     "319120d336924591b530423ed48b6862": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3400947dc9e147a48af83420e397e91f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_18d66598c2e2446daf7d2644c3d81ccb",
       "placeholder": "​",
       "style": "IPY_MODEL_28c140f66abc4feba9ddbe8a603a8457",
       "value": "vocab.txt: 100%"
      }
     },
     "37a4d45d1163405196ab5eeb23a68810": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "44e3e14e6b0a4c8ebe0f974022a0054d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_e5899cc945944b53b3365e3493c1b541",
       "max": 442221694.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_f15aba5523dc4a05984748e38258a94d",
       "value": 442221694.0
      }
     },
     "571c98be78274300ae0d347cdfe8d46e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "58c8982b17e841ff9f781777ea906324": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_dde311309a8249ef8b9762bd932686ed",
       "max": 385.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_043706f11d234f3cae5ee52c295b7404",
       "value": 385.0
      }
     },
     "5f9c88924b72451c9d45a5d2237308b7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6afa23d2d87e4276bb68b43fee1ab8aa",
        "IPY_MODEL_44e3e14e6b0a4c8ebe0f974022a0054d",
        "IPY_MODEL_d8ed7eb5e372424c8a2a5466450b57bc"
       ],
       "layout": "IPY_MODEL_003234a6102446a0bb36885909476784"
      }
     },
     "612dde0ee84c45e983471bb35544f6c1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6afa23d2d87e4276bb68b43fee1ab8aa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_c62e13e1ef81457fa44431f6d5a196e5",
       "placeholder": "​",
       "style": "IPY_MODEL_af0d201df8334b668780d20d3d0ec7c0",
       "value": "pytorch_model.bin: 100%"
      }
     },
     "850dee6150454007ad53fd6cbe694eae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "9200d5ae584e4d4694498068cab9a9f1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3400947dc9e147a48af83420e397e91f",
        "IPY_MODEL_eb0fac9aeb3345ed8c289b2b337e1422",
        "IPY_MODEL_0058c4cee1cf493da617bb352537eb5c"
       ],
       "layout": "IPY_MODEL_612dde0ee84c45e983471bb35544f6c1"
      }
     },
     "92658c0673104484a092035c072963cc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "98b95fa32c934a8890fc89396d6107c2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "af0d201df8334b668780d20d3d0ec7c0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "bdfde7dfdd4f43339f14a50aab3db601": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c62e13e1ef81457fa44431f6d5a196e5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c8b4c231bc854ff5b1c9a43d46d42622": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "cda98527c0484b19bf65cdfbdd935b9a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d5a3f3d7195f4e178a2c9aad26ebda14",
        "IPY_MODEL_58c8982b17e841ff9f781777ea906324",
        "IPY_MODEL_2bf03ad9e29c4abd8c04d20eb9c04683"
       ],
       "layout": "IPY_MODEL_92658c0673104484a092035c072963cc"
      }
     },
     "d5a3f3d7195f4e178a2c9aad26ebda14": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_37a4d45d1163405196ab5eeb23a68810",
       "placeholder": "​",
       "style": "IPY_MODEL_24b41169177d483ca76b6f9035db3f6a",
       "value": "config.json: 100%"
      }
     },
     "d8ed7eb5e372424c8a2a5466450b57bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_0a5252e0175c42ed91ac89cac49a1956",
       "placeholder": "​",
       "style": "IPY_MODEL_e6eb45e58b19402aa073a51e7c5c5a7d",
       "value": " 442M/442M [00:03&lt;00:00, 151MB/s]"
      }
     },
     "dde311309a8249ef8b9762bd932686ed": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e5899cc945944b53b3365e3493c1b541": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e6eb45e58b19402aa073a51e7c5c5a7d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "eb0fac9aeb3345ed8c289b2b337e1422": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_319120d336924591b530423ed48b6862",
       "max": 227845.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_bdfde7dfdd4f43339f14a50aab3db601",
       "value": 227845.0
      }
     },
     "f15aba5523dc4a05984748e38258a94d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
